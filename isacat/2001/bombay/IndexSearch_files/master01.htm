<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:p="urn:schemas-microsoft-com:office:powerpoint"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">
<link id=Main-File rel=Main-File href="../IndexSearch.htm">
<link rel=Preview href=preview.wmf>
<meta name=Robots content=NoIndex>
<link rel=Stylesheet href="master03_stylesheet.css">
<![if !ppt]><script src=script.js></script>
<script>
<!--
	parent.location.href=document.all.item("Main-File").href
//-->
</script>
<![endif]><o:shapelayout v:ext="edit">
 <o:idmap v:ext="edit" data="6"/>
</o:shapelayout>
</head>

<body>
<p:colorscheme
 colors="#FFFFFF,#000000,#808080,#000000,#00CC99,#3333CC,#CCCCFF,#B2B2B2"/><v:background
 id="_x0000_s6145" o:bwmode="white" fillcolor="white [0]">
 <v:fill color2="#33c [5]"/>
</v:background><v:shapetype id="_x0000_s6146" style='position:absolute;left:0;
 top:0;width:234pt;height:36pt' coordsize="21600,21600" o:master="" o:spt="1"
 path="m0,0l0,21600,21600,21600,21600,0xe" filled="f" fillcolor="#0c9 [4]"
 stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="header" size="quarter"/></v:shapetype>

<div v:shape="_x0000_s6146" class=O><span style='font-size:50%;mso-field-code:
meta14'>‹header›</span><span style='font-size:50%;mso-special-format:lastCR'>&#13;</span></div>

<v:shapetype id="_x0000_s6147" style='position:absolute;left:306pt;top:0;
 width:234pt;height:36pt' coordsize="21600,21600" o:master="" o:spt="1" path="m0,0l0,21600,21600,21600,21600,0xe"
 filled="f" fillcolor="#0c9 [4]" stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="dateTime" position="1"/></v:shapetype>

<div v:shape="_x0000_s6147" class=O style='text-align:right'><span
style='font-size:50%;mso-field-code:meta0'>‹date/time›</span><span
style='font-size:50%;mso-special-format:lastCR'>&#13;</span></div>

<v:shapetype id="_x0000_m6148" style='position:absolute;left:90pt;top:54pt;
 width:5in;height:270pt;v-text-anchor:middle' coordsize="21600,21600" o:master=""
 o:spt="1" path="m0,0l0,21600,21600,21600,21600,0xe">
 <v:fill o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter"/>
 <v:shadow obscured="t"/>
 <v:path gradientshapeok="t" fillok="f" o:connecttype="rect"/>
 <o:lock v:ext="edit" text="t"/>
 <p:placeholder type="slideImage" position="2"/></v:shapetype><v:shapetype
 id="_x0000_m6149" style='position:absolute;left:1in;top:342pt;width:396pt;
 height:324pt' coordsize="21600,21600" o:master="" o:spt="1" path="m0,0l0,21600,21600,21600,21600,0xe"
 filled="f" fillcolor="#0c9 [4]" stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="body" position="3" size="quarter"/></v:shapetype>

<div v:shape="_x0000_m6149">

<div class=N>Click to edit Master text styles&#13;</div>

<div class=N1>Second level&#13;</div>

<div class=N2>Third level&#13;</div>

<div class=N3>Fourth level&#13;</div>

<div class=N4>Fifth level</div>

</div>

<v:shapetype id="_x0000_s6150" style='position:absolute;left:0;top:684pt;
 width:234pt;height:36pt;v-text-anchor:bottom' coordsize="21600,21600"
 o:master="" o:spt="1" path="m0,0l0,21600,21600,21600,21600,0xe" filled="f"
 fillcolor="#0c9 [4]" stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="footer" position="4" size="quarter"/></v:shapetype>

<div v:shape="_x0000_s6150" class=O><span style='font-size:50%;mso-field-code:
meta15'>‹footer›</span><span style='font-size:50%;mso-special-format:lastCR'>&#13;</span></div>

<v:shapetype id="_x0000_s6151" style='position:absolute;left:306pt;top:684pt;
 width:234pt;height:36pt;v-text-anchor:bottom' coordsize="21600,21600"
 o:master="" o:spt="1" path="m0,0l0,21600,21600,21600,21600,0xe" filled="f"
 fillcolor="#0c9 [4]" stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="slideNumber" position="5" size="quarter"/></v:shapetype>

<div v:shape="_x0000_s6151" class=O style='text-align:right'><span
style='font-size:50%;mso-field-code:meta16'>‹#›</span><span style='font-size:
50%;mso-special-format:lastCR'>&#13;</span></div>

<p:notes id="7" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s87042"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s87043" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s87043" class=N>
 <div>Introduction &#13;</div>
 <div>- why do we need indexing and searching?&#13;</div>
 <div>- what is information?&#13;</div>
 <div>&#13;</div>
 <div>Problem Space &#13;</div>
 <div>- Representation of data&#13;</div>
 <div>- Information on the web&#13;</div>
 <div>&#13;</div>
 <div>Techniques&#13;</div>
 <div>- Indexing &amp; Searching overview&#13;</div>
 <div>- Autohelp indexing system&#13;</div>
 <div>- IOU Search engine&#13;</div>
 <div>&#13;</div>
 <div>Problem Areas&#13;</div>
 <div>- ?</div>
 </div>
</p:notes><p:notes id="16" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s88066"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s88067" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s88067" class=N>
 <div>1. Unlikely to compete with the big boys&#13;</div>
 2. Useful - internal documents representing company information for internal use&#13;
 <div>3. Useful - documents representing company information for other
 companies&#13;</div>
 The importance of this is likely to increase substantially with the advent of
 the Semantic Web&#13;
 <div>4. Already extremely useful&#13;</div>
 <div><span style='mso-tab-count:1;width:18.83%'> </span>- as ‘shop
 assistant’&#13;</div>
 <div><span style='mso-tab-count:1;width:18.83%'> </span>- for after-sales
 support&#13;</div>
 <div>&#13;</div>
 <div>so what is information...&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="10" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s89090"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s89091" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s89091" class=N>Lead to Information = Data + Structure</div>
</p:notes><p:notes id="9" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s90114"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s90115" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s90115" class=N>Found in virtually any database or flat
 file</div>
</p:notes><p:notes id="12" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s91138"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s91139" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s91139" class=N>relational database</div>
</p:notes><p:notes id="13" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s92162"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s92163" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s92163" class=N>found in object datases, filesystems,
 anywhere where hierarchical data is stored - the tree adds structure providing
 information such as containership or inheritance</div>
</p:notes><p:notes id="2" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s93186"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s93187" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s93187" class=N>
 <div>generally found in human-readable documents&#13;</div>
 <div>varying structure makes comparison difficult for machines</div>
 </div>
</p:notes><p:notes id="49" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s94210"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s94211" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s94211" class=N>
 <div>found on the web&#13;</div>
 the document has all the complications of the structure just seen, and the hyperlink
 structure is difficult to make sense of - cannot be directy used for cataloguing&#13;generally
 speaking we have to build our own structures, using indexing schemas based on
 the content of the individual documents - meta tags are one way in which the
 page author can help&#13;when XML-based formats are more widely adopted this
 will become easier, but for now we have to deal with predominantly messy
 HTML&#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="17" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s95234"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s95235" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s95235" class=N>well-known to web designers, the
 navigation element is as important as the view</div>
</p:notes><p:notes id="14" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s96258"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s96259" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s96259" class=N>The idea behind indexing is pretty
 straightforward. A source set of data, which here I’ve labelled the corpus, is
 scanned through by some means, exposing the contents of the corpus. Here I’m
 assuming the corpus is a set of documents. The location in the corpus of each
 document is recorded in the index, together with a reference containing
 information extracted from the document. If the corpus was a book, the filter
 would extract significant words together with the page numbers on which they
 occur, and place this in the index.</div>
</p:notes><p:notes id="15" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s61442"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s61443" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s61443" class=N>Once an index has been constructed, it
 may be queried and the results are most commonly pointers to the required
 information. We go through the alphabetical index at the back of a book until
 we find the term we are looking for, and lookup the pge number. When dealing
 with electronic information, which could potentially contain a vast amount of
 information, it is usually necessary to first process the query into a form
 that is best suited to perform a lookup in the index. In addition, there are
 usually a whole load of documents that match the query to some extent, so some
 algorithm is applied to sort these in order of likely relevance.</div>
</p:notes><p:notes id="23" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s62466"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s62467" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s62467" class=N>Though the indexing system used in a
 search engine relies on dynamic lookups of the index, this isn’t alway
 necessary, and I’ll now describe a system that uses static indexes, based on
 the JavaHelp package.&#13;In the time we’ve got it would be impossible to look
 in any depth at indexing and searching. My hope is that by looking at a couple
 of simple applications you should get a general feel of the kind of techniques
 available using Java.&#13;So the first application is a way of indexing HTML
 pages using XML, and later I will go through the construction of a basic
 search engine for the web, which will be backed by a relational database.</div>
</p:notes><p:notes id="18" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s97282"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s97283" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s97283" class=N>
 <div>JavaHelp is a standard Java extension package&#13;</div>
 <div>classes found in javax.help.*&#13;</div>
 <div>designing for help such as context-sensitive, though can be standalone</div>
 </div>
</p:notes><p:notes id="21" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s98306"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s98307" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s98307" class=N>
 <div>use as standalone book reader &#13;</div>
 <div>selected item on left shown in viewing pane on right</div>
 </div>
</p:notes><p:notes id="20" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s99330"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s99331" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s99331" class=N>
 <div>hierarchical contents, folders as branches, leaves point to HTML
 pages&#13;</div>
 <div><span style="mso-spacerun: yes"> </span>lollipops expand&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="19" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s100354"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s100355" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s100355" class=N>contains search engine system (not
 discussed further)</div>
</p:notes><p:notes id="22" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s101378"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s101379" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s101379" class=N>XML used as index</div>
</p:notes><p:notes id="27" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s102402"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s102403" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s102403" class=N>the location of every page is mapped to
 a unique logical name</div>
</p:notes><p:notes id="28" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s103426"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s103427" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s103427" class=N>the index file maps human name (included
 in index column) with (hidden) logical name</div>
</p:notes><p:notes id="24" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s104450"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s104451" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s104451" class=N>
 <div>TOC is hierarchical, XML put to good use, nesting reflects tree
 structure&#13;</div>
 targets refer to logical names (in map file), text is label displayed in
 contents panel</div>
</p:notes><p:notes id="25" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s105474"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s105475" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s105475" class=N>HelpSet file simply gives location of
 different elements, and says what class they should be handled by&#13;
 <div>&#13;</div>
 creating the 4 xml files manually can be seriously long-winded, and will be unfeasible
 for larger documents sets&#13;fortunately we can make use of some information
 implicit in the set of HTML pages</div>
</p:notes><p:notes id="67" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s107522"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s107523" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s107523" class=N>directories have names, so do files and
 these will hopefully reflect their contents - i.e. this is metadata&#13;in
 this example they only add structural information, but the book folder could be
 called ‘Adventures of Sherlock Holmes’ and the first filename ‘A Scandal in
 Bohemia’&#13;
 <div>as always, naming is of great importance&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="30" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s108546"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s108547" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s108547" class=N>small command-line application</div>
</p:notes><p:notes id="68" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s111618" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s111619"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s111619" class=N>To show how a DOM can be used, I’ll
 start by going through the code to make a simple XML document, one that
 JavaHelp needs, the HelpSet file.&#13;This file is relatively static, so for
 the sake of demonstration I’ll hard-code its construction in DOM</div>
</p:notes><p:notes id="31" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s109570"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s109571" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s109571" class=N>First we need to create a DOM document -
 to get a document we need to get an instance of a DocumentBuilderFactory, and
 get this to built a document. I am assured that using these patterns makes
 life easier in the long run.&#13;Once we have a document, I’m going to want to
 populate this with branches and leaves, and these will be represented by
 Element objects, corresponding directly with XML elements. </div>
</p:notes><p:notes id="32" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s112642"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s112643" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s112643" class=N>DOM will automitally generate a document
 header for us, which is the first line of the XML snippet.&#13;The tree start
 with a root, which is just a particular element, so in the code we create an
 element and set it’s attribute. This will produce the second line of the XML.&#13;We
 create a title element in the same way, and as this contains text we create a text
 node. Though not clear in the final XML, the text of the element is stored in
 DOM as a child of the element. The next line makes the text a descendent of the
 title element. The title element is now complete, so we may add it to the root
 element we have already created. The hierarchy this has created can be seen in
 the XML. &#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="34" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s113666"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s113667" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s113667" class=N>Here we are doing the same again
 (describe), with location attribute being build from the name supplied to the
 method - here it is ‘Help’&#13;We continue in exactly the same manner to built
 the complete tree for the HelpSet file - the class that does this is called
 HelpSet.java</div>
</p:notes><p:notes id="36" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s114690"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s114691" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s114691" class=N>To make use of the implicit information
 in the file system, we are going to have to walk through the files and
 directory and get there names. This is the same kind of idea as the DOS dir
 command, but in this application every time a new file or directory is
 encountered it will trigger an event (the events are of our own making,
 unrelated to the Java Event class), which will cause some action to occur
 towards building the XML files. This event driven approach is a useful
 pattern, for example the same technique is used in the SAX XML parser.</div>
</p:notes><p:notes id="35" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s115714"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s115715" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s115715" class=N>When the events are triggered, we will
 need methods to handle them. Here is an interface that outlines the methods
 that will be required.</div>
</p:notes><p:notes id="37" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s116738"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s116739" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s116739" class=N>Now we have the directory walker itself.
 When supplied with a Java File object, it first checks to see if it is a
 directory - directories can be represented as file objects as well as
 files.&#13;If the file is a directory, we call the appropriate handler method.
 Next we use File’s list() method to get a list of the files contained in that
 directory. Again, this is much like the DOS dir command. Here the list is
 sorted. Now the interesting bit - if the directory isn’t empty, the method
 will step through each of the items found on the list, which may be files or
 directories, and call this same method. This kind of recursion is an
 exceptionally good way of moving around trees of data. The stop condition for
 the recursion is simple enough - it stops when it has run out of files and
 directories.&#13;If the directory didn’t contain any files or subdirectories,
 we call the handler to deal with the empty directory. As it happens, in this
 application this will do nothing.&#13;Finally, if the File object wasn’t a
 directory, then it must have been a file, so we call the fileElement handler.</div>
</p:notes><p:notes id="29" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s117762"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s117763" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s117763" class=N>We’d better have a look at the kind of
 documents we want to build. I’ve already shown a class that will generate the
 HelpSet file tree, and this is self contained. The construction of the other
 three XML documents will depend of the file system information. The three
 documentss are similar in this and other respects, so we will model each with
 a subclass of a generic HelpDocument class.</div>
</p:notes><p:notes id="38" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s118786"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s118787" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s118787" class=N>This class contains a member that will
 hold the actual DOM document. The constructor contains the code to get a
 document from the BuilderFactory as we saw earlier. Most of the methods
 directly call the methods of the DOM document class, but I’ve added one or two
 helpers such as appendToRoot() to wrap a common function. The last of these
 methods you may notices is writeXMLFile(), which will cause the DOM document
 to stream to disk as an XML file.</div>
</p:notes><p:notes id="41" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s119810"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s119811" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s119811" class=N>Though the map document may be
 represented as a tree in DOM, it’s structure is very simple, a root and lots
 of leaves - a sort of stunted palm tree perhaps. The MapDocument class
 inherits the methods of the HelpDocument superclass, but in addition has a few
 map-file specific methods. The result of each of these can be gathered from
 the XML snippet.</div>
</p:notes><p:notes id="42" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s120834"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s120835" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s120835" class=N>If we take a close look at one of these
 methods, we can see it simply wraps up a series of operations, the operations
 needed to add a map ID item. These operations are exactly the same as we saw
 when hard-coding the HelpSet document, and here the structure is hard-coded
 but not the content. The URL is the location of an HTML file and the mapRef
 String is a logical name for the file.</div>
</p:notes><p:notes id="43" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s121858"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s121859" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s121859" class=N>If we have a look at MapDocument’s
 makeMapRef method, we can see how the filename and directory of the HTML file
 are ‘humanised’.</div>
</p:notes><p:notes id="40" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s122882"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s122883" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s122883" class=N>The index document is another stunted
 palm tree. One problem with the index list is that the item names need to be
 in alphabetical order, but the way the directory walker encounters them is
 directory by directory. To allow for this we use a TreeMap as a sorted array
 to store the names in order. Once the whole set of HTML files has been
 traversed, the array is pumped into a DOM tree with the buildIndex method.</div>
</p:notes><p:notes id="39" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s123906"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s123907" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s123907" class=N>The table of contents view has an
 obvious tree structure. We are going to directly map the tree structure of the
 file system into the table of contents DOM tree. Each file and directory will
 be represented as an element, and the nesting will reflect the stucture.<span
 style="mso-spacerun: yes">  </span>For each table of contents entry we will
 create a new element. Note that there are two methods for this - if you look
 at the view on the right, you will see that some of the entries are folders
 and some are files. The XML elements that correspond to files need to have an
 extra attribute, to give the logical name of the HTML file it points to.<span
 style="mso-spacerun: yes">  </span>&#13;As the files and directories are
 encountered in series, we need some way of keeping track of where in the
 directory structure we are. This is achieved by means of a Stack. Every time
 we go up a directory, the corresponding element will be pushed onto the Stack.
 Every time we go down a directory the element will be popped out again. So the
 deeper the directory nesting, the more elements there are in the stack.</div>
</p:notes><p:notes id="44" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s124930"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s124931" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s124931" class=N>We’ve now looked at all the important
 classes of the AutoHelp application bar one - the one which converts the
 in-memory DOM tree into an XML file. The code in this application uses core
 Java classes and the Java API for XML Processing (JAXP), also available from
 Sun.<span style="mso-spacerun: yes">  </span>The easiest way of getting a file
 out is to use one of the classes from the crimson package, developed by the Apache
 group. This package is included in the JAXP release, though it may be worth
 remembering that it isn’t strictly part of the JAXP standard Java extension
 package. &#13;The method used to write XML to file is found in the OutputDOM
 class of the AutoHelp application. It couldn’t be easier. First we cast the
 DOM document in question into a crimson XmlDocument, create an file object,
 create an output stream from this object and then just write it.</div>
</p:notes><p:notes id="45" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s125954"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s125955" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s125955" class=N>There are a few more classes in the
 AutoHelp application than those we’ve already seen, so I’ll now briefly tell
 you what they do, and describe how the whole application fits together.&#13;
 <div>&#13;</div>
 <div>&lt;APPLICATION DEMO&gt;</div>
 </div>
</p:notes><p:notes id="47" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s126978"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s126979" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s126979" class=N>Now we come to the second of my
 demonstration applications, a search engine which, for want of a better name,
 I’ve called the Information Overload Unit, or IOU for short.&#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="56" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s128002"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s128003" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s128003" class=N>If we return to the earlier slide, we
 have the general principle of indexing. We go through all the documents and
 record their location, and key aspects of their content. In the IOU
 application the content summaries are described in terms of document models.
 This is not unlike the XML document model, though nothing like as elegant, as
 we can’t get that same degree of control when dealing with HTML in the wild.
 So rather than thinking Airfix aeroplane model, think lump of clumsily
 squeezed plasticine model. </div>
</p:notes><p:notes id="50" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s129026"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s129027" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s129027" class=N>I’ve set IOU up to operate in two modes
 - one of which takes a brute force approach and the model simply contains the
 whole HTML document as a set of characters, the other in it’s essential form
 consists of a set of fields, extracted from the markup of the HTML document.
 The title comes straight from the title tag and the keywords and description
 from the corresponding meta tags. The headers field is the contents of the H1
 to H6 tags, and finally the body text field is all the text of the document. </div>
</p:notes><p:notes id="54" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s130050"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s130051" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s130051" class=N>The ‘Raw’ mode processes each page the
 system encounters in two separate ways. Firstly it streams in the whole
 content of the page, ready to place into a database table. Then a HTML parser
 is used to extract the HREF tags, that is, the hyperlinks to other documents.</div>
</p:notes><p:notes id="57" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s131074"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s131075" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s131075" class=N>Given a Java URL object, it is pretty
 straightforward to get the data contained at the URL. First we open a
 connection, and from this obtain a byte input stream. By wrapping this in an
 InputStreamReader we get the data as characters. To allow the system to get
 the stream in the most efficient way, we wrap this in turn with a
 BufferedReader. We can then read the stream into a character array.</div>
</p:notes><p:notes id="58" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s132098"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s132099" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s132099" class=N>To make sense of the tags found in a
 HTML document, it is necessary to parse it. The HTML parser that is available
 in core Java operates in a very similar way to the directory walker we saw
 earlier. As it scans through a document, whenever it encounters a HTML tag,
 it<span style="mso-spacerun: yes">  </span>calls a handler method. The tag may
 be a SimpleTag such as a meta tag, or a StartTag such as A HREF, which will be
 followed at some point by an end tag, slash-A. When text is encountered in the
 body of the document this is also passed to the handler.</div>
</p:notes><p:notes id="59" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s79874"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s79875" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s79875" class=N><b>The classes needed to build a parser
 are contained in </b><b>javax.swing.text.html. Here we have some of the key
 methods of </b><b>ParserCallBack, which will act as a handler for parser
 events. Each type </b><b>of tag has a corresponding field in the HTML-dot-Tag
 class.<span style="mso-spacerun: yes">  </span><br>
 </b><b>So for example we
 could do a test to see if the tag t sent to the </b><b>handleSimpleTag method
 equals HTML-dot-Meta.&#13;</b>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="60" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s133122"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s133123" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s133123" class=N>The handler in IOU extends the
 ParserCallBack class, and contains a HashMap will hold the fields for the
 Filtered model such as title, keywords and so on encountered in the document.
 Here we can see how a description metatag can be handled. The name and content
 attributes of a simple tag are extracted, if the name of the tag is
 ‘description’, then this the contents of the description is<span
 style="mso-spacerun: yes">  </span>put as a labelled pair into the fields
 hashmap.</div>
</p:notes><p:notes id="61" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s78850"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s78851" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s78851" class=N>To parse a HTML page, we get a Buffered
 reader as we did before. The parser delegator looks after the creation of a
 document parser for us, and all we have to do is provide the reader and
 handler and call parse. Here the handler is an instance of our
 HTMLParserCallback class. </div>
</p:notes><p:notes id="62" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s134146"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s134147" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s134147" class=N>The HyperLink class represents a link,
 and will look after things like converting a relative url into an absolute
 one. HTMLCallback as we have seen is at the heart of document parsing. The
 Filtered and Raw document classes are descended from the Document class. This
 class has a method called read(), which will activate the parser, and if in
 the raw mode it will activate the stream reader as well. Either way it
 populates itself with data from the target HTML page. Once the data has been
 read, then either it can be sent more or less directly to the database, when
 in the ‘raw’ mode, or may apply additional processing to the data when in the
 filtered mode. </div>
</p:notes><p:notes id="63" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s82946"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s82947" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s82947" class=N>I’m afraid the layout of this diagram is
 a bit confusing, but if you think of the database as being to the right of the
 picture, DBAccess classes contain the JDBC code necessary to store and
 retrieve data extracted from the documents. The LinkDBAccess class looks after
 the storing and retrieving of hyperlinks. On the left of the diagram are
 buffer classes, to reduce the number of calls needed directly to the databse.
 The DocumentBuffer class looks after the buffering of both Raw and Filtered
 document objects.<span style="mso-spacerun: yes">  </span></div>
</p:notes><p:notes id="52" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s135170"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s135171" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s135171" class=N>The table that will hold documents in
 the raw mode has a good pile of fields. It isn’t likely to find much
 application in it’s present form, but the fields are included to suggest some
 of the pieces of data that are potentially available. The host, path and
 filename together give the location of the document. The next three fields are
 obtained from the http connection - the filelength is simply the number of
 characters in the document, pagedate may be the date of the page’s creation,
 and expiry date may be the date the document is due to become invalid. There
 is no real guarantee that the values obtained for the pagedate and expirydate
 fields will be valid. The scandate is the date this system scanned the page,
 and the content field contains all the characters in the page.&#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="66" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s136194"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s136195" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s136195" class=N>The links table is very important in
 this application. It will not only hold a lit of the pages visited, but also
 those hyperlinks found on HTML pages, pointing to pages that haven’t yet been
 visited. Again we have host, path and filename. The type refers to mimetype,
 and in the IOU application we only make the distinction between this being
 text/html or not. Scanned is a flag to say that the page has been visited, and
 scandate the date it was visited. The DOCREF field is for use in conjuction
 with the table used in the filtered mode, and points to the record in that
 table that corresponds to this link. The inlinks field keeps a tally of the
 number of hyperlinks encountered that point to this address, which may be used
 in the ranking of pages according to their number of citations. </div>
</p:notes><p:notes id="65" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s137218"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s137219" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s137219" class=N>If we place the table we will use in the
 filtered document model, you will see the significance of the DOCREF field in
 the links table. I know corewords isn’t a particularly neat name for the table
 and field, but I ended up calling it this after trying such names as ‘key’ and
 ‘index’, which ran into conflict with SQL key words.</div>
</p:notes><p:notes id="53" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s138242"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s138243" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s138243" class=N>The spider or webcrawler is really a
 very straightforward animal. First of all a page on the web is supplied. The
 hyperlinks on this page are extracted, and put in a queue. The queue in the
 IOU application is actually the links table. The top link in the queue is then
 obtained and the page it addresses pulled off the internet. The links on this
 page are extracted and put in the queue, and the process continues. &#13;
 <div>// queue priority algorithm&#13;</div>
 <div>// threading</div>
 </div>
</p:notes><p:notes id="74" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s146434"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s146435" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s146435" class=N>Here is a trimmed version of the code
 for the IOU spider. A side effect of this piece of code is that the pages that
 get scanned are saved to the database. In other words this is the heart of the
 Information Overload Unit.&#13;
 <div>&lt;explain code&gt;&#13;</div>
 The full version of this routine is found in the IOU Index class, which also contains
 the main method to start the program up.</div>
</p:notes><p:notes id="78" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s151554"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s151555" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s151555" class=N>It is possible to filter out whole pages
 during the discovery process using the isAcceptable method in the
 FilteredDocument class - in this snippet all pages that contain text, which
 includes HTML will be accepted as long as somewhere in the document is the
 word Mumbai.</div>
</p:notes><p:notes id="75" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s152578"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s152579" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s152579" class=N>The filter I’ve used to create the
 corewords values is quite quick and dirty. First of all, all the text fields
 we have extracted from the HTML page are concatenated. This might seem rather
 crude, but what follows makes sense of this.&#13; The filter is applied to
 this combined string. First it is stripped of all punctuation marks by a
 utility method. Then a stopper is applied, which removes common words from the
 string. The hashset contains the list of common words - for instance ‘and’,
 ‘this’, ‘about’, ‘above’ and so on. The list is picked up from a text file
 containing about four thousand of these words. As you can imagine, this strips
 down the size of the text string considerably. The stopper class carries out a
 couple more filtering operations as well. The second parameter tells it to
 remove any duplicate words - i.e. words that appear more than once in the
 text. The next argument in another punction handler which we don’t need as
 we’ve already stripped this out. The last parameter, with a value of 4 here,
 removes any words with less than four letters. Finally another utility method
 is called to trim the string to a preset length, I think I’ve set it to 200 characters.
 This trims to the end of the last word, so we aren’t left with any half-words.&#13;Looking
 back to the line where all the fields are combined, you can now see there is
 significance in the order. It is assumed that the most significant words will
 be in the title, then keywords and description and so on. When the text has been
 stripped down, we should have a string of words that represent the most significant
 ones in the text.&#13;
 <div>&lt;mention stemming&gt; &#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="76" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s153602"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s153603" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s153603" class=N>To set the spider going, we need to
 provide it with a few starting points. I got<span style="mso-spacerun: yes"> 
 </span>a handful of URLs by doing a search on the Google search engine for the
 term Mumbai.</div>
</p:notes><p:notes id="79" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s155650"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s155651" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s155651" class=N>
 <div>&lt;slide of command line showing a handful of URLs&gt;&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="71" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s156674"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s156675" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s156675" class=N>Once the spider has been running for a
 while, we can check it’s progress by running a query on the database. Here the
 query requests all records in the link table that have been scanned. If the
 docref is -1, then the page couldn’t be retrieved - either it didn’t contain
 HTML or was a dead link.</div>
</p:notes><p:notes id="73" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s157698"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s157699" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s157699" class=N>We can do more sophisticated queries on
 the tables. Here the query will return all records that contain the keyword
 game. The percentage signs act as wildcards.</div>
</p:notes><p:notes id="72" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s144386"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s144387" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s144387" class=N>Being even more sophisticated we can
 take advantage of the relational nature of the database. Here we have obtained
 the ID value of the records in the corewords table that contain the word
 ‘game’, and used the to get the corresponding records from the links
 table.&#13;Note that this is the MySQL dialect of SQL, the LEFT JOIN here is
 equivalent to the INNER JOIN found in some other databases.</div>
</p:notes><p:notes id="85" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s166914" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s166915"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s166915" class=N>Our index has now been built, and we’ve
 done a few queries. For the sake of simplicity I’ve left out the Filter and
 Ranking parts of the search system. &lt;mention more&gt;</div>
</p:notes><p:notes id="80" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s162818"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s162819" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s162819" class=N>
 <div>If we want to do the queries programmatically, we can easily use
 JDBC.&#13;</div>
 <div>&lt;explain code&gt;&#13;</div>
 In most circumstances, for efficiency<span style="mso-spacerun: yes"> 
 </span>it would be better to use a PreparedStatement, but here it doesn’t
 matter too much and so for simplicity I’ve just used a plain statement.</div>
</p:notes><p:notes id="83" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s163842"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s163843" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s163843" class=N>&lt;explain code&gt;</div>
</p:notes><p:notes id="82" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s167938"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s167939" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s167939" class=N>
 <div>This is a Wrox Press conference, so I had to get into servlets at some
 point&#13;</div>
 <div>&lt;explain code&gt;</div>
 </div>
</p:notes><p:notes id="86" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s171010" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s171011"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s171011" class=N>
 <div>This is a Wrox Press conference, so I had to get into servlets at some
 point&#13;</div>
 <div>&lt;explain code&gt;</div>
 </div>
</p:notes><p:notes id="84" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s168962"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s168963" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s168963" class=N>&lt;explain code&gt;</div>
</p:notes><p:notes id="69" layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6148"/><v:shape id="_x0000_s172034"
  type="#_x0000_m6148" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s172035" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s172035" class=N>the end result</div>
</p:notes>
</body>

</html>
