<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:p="urn:schemas-microsoft-com:office:powerpoint"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">
<link id=Main-File rel=Main-File href="../KExpert.htm">
<link rel=Preview href=preview.wmf>
<meta name=Robots content=NoIndex>
<link rel=Stylesheet href="master03_stylesheet.css">
<![if !ppt]><script src=script.js></script>
<script>
<!--
	parent.location.href=document.all.item("Main-File").href
//-->
</script>
<![endif]><o:shapelayout v:ext="edit">
 <o:idmap v:ext="edit" data="6,78"/>
</o:shapelayout>
</head>

<body>
<p:colorscheme
 colors="#FFFFFF,#000000,#808080,#000000,#00CC99,#3333CC,#CCCCFF,#B2B2B2"/><v:background
 id="_x0000_s6145" o:bwmode="white" fillcolor="white [0]">
 <v:fill color2="#33c [5]"/>
</v:background><v:shapetype id="_x0000_s6146" style='position:absolute;left:0;
 top:0;width:234pt;height:36pt' coordsize="21600,21600" o:master="" o:spt="1"
 path="m0,0l0,21600,21600,21600,21600,0xe" filled="f" fillcolor="#0c9 [4]"
 stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="header" size="quarter"/></v:shapetype>

<div v:shape="_x0000_s6146" class=O><span style='font-size:50%;mso-field-code:
meta14'>‹header›</span><span style='font-size:50%;mso-special-format:lastCR'>&#13;</span></div>

<v:shapetype id="_x0000_s6147" style='position:absolute;left:306pt;top:0;
 width:234pt;height:36pt' coordsize="21600,21600" o:master="" o:spt="1" path="m0,0l0,21600,21600,21600,21600,0xe"
 filled="f" fillcolor="#0c9 [4]" stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="dateTime" position="1"/></v:shapetype>

<div v:shape="_x0000_s6147" class=O style='text-align:right'><span
style='font-size:50%;mso-field-code:meta0'>‹date/time›</span><span
style='font-size:50%;mso-special-format:lastCR'>&#13;</span></div>

<v:shapetype id="_x0000_m6149" style='position:absolute;left:1in;top:342pt;
 width:396pt;height:324pt' coordsize="21600,21600" o:master="" o:spt="1"
 path="m0,0l0,21600,21600,21600,21600,0xe" filled="f" fillcolor="#0c9 [4]"
 stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="body" position="3" size="quarter"/></v:shapetype>

<div v:shape="_x0000_m6149">

<div class=N>Click to edit Master text styles&#13;</div>

<div class=N1>Second level&#13;</div>

<div class=N2>Third level&#13;</div>

<div class=N3>Fourth level&#13;</div>

<div class=N4>Fifth level</div>

</div>

<v:shapetype id="_x0000_s6150" style='position:absolute;left:0;top:684pt;
 width:234pt;height:36pt;v-text-anchor:bottom' coordsize="21600,21600"
 o:master="" o:spt="1" path="m0,0l0,21600,21600,21600,21600,0xe" filled="f"
 fillcolor="#0c9 [4]" stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="footer" position="4" size="quarter"/></v:shapetype>

<div v:shape="_x0000_s6150" class=O><span style='font-size:50%;mso-field-code:
meta15'>‹footer›</span><span style='font-size:50%;mso-special-format:lastCR'>&#13;</span></div>

<v:shapetype id="_x0000_s6151" style='position:absolute;left:306pt;top:684pt;
 width:234pt;height:36pt;v-text-anchor:bottom' coordsize="21600,21600"
 o:master="" o:spt="1" path="m0,0l0,21600,21600,21600,21600,0xe" filled="f"
 fillcolor="#0c9 [4]" stroked="f" strokecolor="black [1]">
 <v:fill color2="white [0]" o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter" o:forcedash="t"/>
 <v:shadow color="gray [2]"/>
 <v:path gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" grouping="t"/>
 <p:placeholder type="slideNumber" position="5" size="quarter"/></v:shapetype>

<div v:shape="_x0000_s6151" class=O style='text-align:right'><span
style='font-size:50%;mso-field-code:meta16'>‹#›</span><span style='font-size:
50%;mso-special-format:lastCR'>&#13;</span></div>

<v:shapetype id="_x0000_m6152" style='position:absolute;left:90pt;top:54pt;
 width:5in;height:270pt;v-text-anchor:middle' coordsize="21600,21600" o:master=""
 o:spt="1" path="m0,0l0,21600,21600,21600,21600,0xe">
 <v:fill o:detectmouseclick="t"/>
 <v:stroke joinstyle="miter"/>
 <v:shadow obscured="t"/>
 <v:path gradientshapeok="t" fillok="f" o:connecttype="rect"/>
 <o:lock v:ext="edit" text="t"/>
 <p:placeholder type="slideImage" position="2"/></v:shapetype><p:notes id="5"
 layout="notes" slots="slideImage,body">
 <p:shaperange href="master01.xml#_x0000_m6152"/><v:shape id="_x0000_s248834"
  type="#_x0000_m6152" style='position:absolute;left:90pt;top:54pt;width:5in;
  height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:shape><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s248835" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape></p:notes><p:notes id="81"
 layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s134146" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s134147" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape></p:notes><p:notes id="7"
 layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s227330" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s227331" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s227331" class=N>The days of a PDA being nothing more
 than a personal organiser, are history.</div>
</p:notes><p:notes id="10" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s158722" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s158723" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s158723" class=N>I’m only taken the development to the
 proof of concept stage, and the prototype system at the end has its fair share
 of faults, but hopefully along the way you’ll see how writing for the Palm can
 be nearly as straightforward as writing for any other platform. This
 application isn’t trivial, but then again it isn’t overly complex. Hopefully I
 can convey the idea that although the device is limited, the limit in terms of
 what you can program it to do is pretty high. The application is a bit of an
 unusual one, but a lot of the techniques I’ll be demonstrating are very useful
 and can be applied elsewhere. With a bit of luck the novelty of the
 application might even give you some ideas. &#13;
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="78" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s114690" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s114691" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s114691" class=N>
 <div>Most applications begin with some for of requirements specification.&#13;</div>
 <div>&#13;</div>
 <div>&#13;</div>
 <div>by changing the data&#13;</div>
 <div>keep the number of questions to a minimum&#13;</div>
 <div>generic</div>
 </div>
</p:notes><p:notes id="23" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s39938" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s39939" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s39939" class=N>The development process used for this
 application is pretty conventional, and can be summarised like this. We need
 to examine the problem and decide what’s needed, taking into account things
 like the target platform. Then we look from a fairly high level at what kind
 of objects we will need for the system, and then finally implement these in
 our language of choice.</div>
</p:notes><p:notes id="24" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s41986" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s41987" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s41987" class=N>If we break down the development process
 a little we can come up with a series of steps we can follow before we start
 coding. Although in a some systems the model-view-controller approach is too
 coarse grained, and the user interface and event handling of Java can confuse
 matters, for development on a device like the Palm it makes for a good
 overview.&#13;
 <div>&#13;</div>
 In this presentation I’m going to be jumping around quite a bit between modelling
 activities and actual code. I’m able to do this with the benefit of hindsight,
 when I was actually doing the development the process was pretty much
 sequential as in this slide. A lot of the modelling and some of the code I’ll
 be showing might seem trivial - I hope so, because this will mean that I’ve done
 the job properly. Modeling shouldn’t be a difficult task - if the system is complex,
 then it needs breaking down until you’ve got subsystems and components that
 *are* easy to model. If you can see a model in these terms then chances are
 that the code you build from it will work. &#13;
 <div>&#13;</div>
 Just as an aside, I’d also strongly recommend that any programmer takes a look
 at the techniques of so-called Extreme Programming - some of these are rather
 questionable, but there are a lot of very good ideas.&#13;
 <div>&#13;</div>
 I’ll start by giving a brief introduction to Expert Systems, and then
 reviewing the aspects of J2ME I’m going to use. I think this could be loosely
 described as part of the requirements analysis.</div>
</p:notes><p:notes id="8" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s36866" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s36867" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s36867" class=N>Expert Systems form a sizeable chunk of
 the field known as knowledge engineering. This is a branch of artificial
 intelligence. Artificial intelligence suffered from major hype in its early
 days, around the 1960’s, and little of its promise has been fulfilled even to
 the present day. Some of the techniques AI looked at such as fuzzy logic and
 speech recognition are finding a lot of practical application today, though
 when these things get out of the hands of the academics and into the hands of
 engineers, references to artificial intelligence get dropped. This is probably
 in part due to embarassment with ideas like machine consciousness. &#13;
 <div>&#13;</div>
 Personally I reckon cosnsciousness is an emergent property of complex neurological
 systems, and the way the internet is now heading with the semantic web it
 won’t be long before the net becomes such a system. But that’s by the by.&#13;
 <div>&#13;</div>
 <div>Expert Systems are very down to earth, unglamorous and mechanical.<span
 style="mso-spacerun: yes">  </span>&#13;</div>
 <div>&#13;</div>
 To quote Ada Lovelace, arguably the first person to write software : “The Analytical
 Engine has no pretensions whatever to originate anything. It can do whatever
 we know how to order it to perform.”<span style="mso-spacerun: yes"> 
 </span>For analytical engine read expert system.<span style="mso-spacerun:
 yes">  </span>&#13;
 <div>&#13;</div>
 Knowledge engineering uses a different paradigm than the one we’re most familiar
 with in programming. Rather than dealing with data and algorithms, it deals
 with knowledge and inference. The Expert System is the archetypal knowledge
 based system.&#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="76" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s106498" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s106499" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s106499" class=N>
 <div>Here we have one model of how a human expert can solve a problem. &#13;</div>
 <div>&#13;</div>
 If a plumber is called in to sort out a strange noise in a drainpipe, he knows
 that the drain connects to the sewer and that rats live in the sewer. Being a
 bit of a rat expert as well, he knows that rats like to crawl up pipes. Using
 this knowledge he can infer that that the noise might well be caused by a
 four-legged visitor. This may be the solution in itself, or more likely the
 plumber might just consider it a hypothesis and use his knowledge and a wrench
 to test the hypothesis.&#13;
 <div>&#13;</div>
 Though our plumber knew a bit about rats, it is unlikely that a rat expert
 would know how to fit a lavatory cistern. With expert systems it is normal to
 restrict the knowledge base to a clearly defined area, which is known as the knowledge
 domain.&#13;
 <div>&#13;</div>
 If we can extract the knowledge and inferences from the human expert, and formalise
 these into a digital representation, we can in principle use a computer to do
 the expert’s job. Please don’t tell my plumber I said that.</div>
</p:notes><p:notes id="21" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s37890" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s37891" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s37891" class=N>One straightforward way of formalising
 expert knowledge is like this. If you remember that knowledge in knowledge
 engineering terms corresponded to data in conventional programming, so here we
 could say we have a database comprised of facts and rules. Inferences
 corresponded to algorithms, so the inference engine can be seen a set of
 processing methods or functions. &#13;
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="22" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s35842" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s35843" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s35843" class=N>A fact in knowledge engineering terms is
 not unlike regular facts. There is an implicit characteristic - the fact can
 be true or false. An expert system doesn’t care if a fact carries any meaning
 outside of the system, so any of these items on the list could represent a
 fact. The expert system won’t know what ‘switch on the light means’, but we
 can make sense of this. &#13;
 <div>&#13;</div>
 <span style="mso-spacerun: yes"> </span>In practice what is called a fact is
 really nothing more than a token, which can have a value of true or false. Of
 course facts are much use by themselves - we need to be able to describe
 relationships between the facts.</div>
</p:notes><p:notes id="77" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s108546" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s108547"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s108547" class=N>The kind of relationship between facts
 that expert systems usually deal with are known as production rules. These are
 very familiar creature, being nothing more than an if..then.. statement. What
 we are looking at is nothing more than simple propositional logic. The kind of
 expert system I’m going to describe is also known as a production system.&#13;
 <div>&#13;</div>
 This example is part of the expert knowledge on how to drive, which we can easily
 extend.</div>
</p:notes><p:notes id="20" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s109570" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s109571" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s109571" class=N>Here we have a simple knowledge base - a
 set of facts and a set of rules. Note that in its initial state, whether each
 of the facts is true or false will be unknown, in the same way that a plumber
 might wait for the phone to ring with a problem to solve. Once we have told
 the system the state of one or more of the facts, or told the plumber our
 problem the system can work with that information. The work is carried out by
 the inference engine, which I’ll come to in a moment.&#13;
 <div><span style="mso-spacerun: yes">  </span>&#13;</div>
 Note that I’ve labelled a couple of the facts as goals - these represent the targets,
 in other words the system will be given the colour of the light and<span
 style="mso-spacerun: yes">  </span>its problem is to decide whether to apply
 the brake or the accelerator.</div>
</p:notes><p:notes id="19" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s110594" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s110595" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s110595" class=N>In essence, all the inference engine
 does is resolve the known facts against its knowledge base. There are two
 parts to this process - matching the facts with corresponding rules and
 applying the rules to ascertain the state of more facts.&#13;
 <div>&#13;</div>
 To introduce a bit of production system terminology, when the whole of the left
 hand side of a rule has been determined, giving us a result for the right hand
 side,<span style="mso-spacerun: yes">  </span>the rule is said to have
 fired.&#13;The system will need to keep track of which rules have fired and
 the facts which it knows are true or false. The part of the system that holds
 this information, that is the current state of the problem-solving process is
 known as the working memory. No, it isn’t a very original name.&#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="60" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s111618" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s111619" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s111619" class=N>Of course we can make our rules a little
 more interesting by introducing boolean operators. To keep the Palm expert
 system simple, I only provided the facility for the AND and NOT operators.
 Note that by combining these we can get the OR operation for free, thanks to
 de Morgan’s law, and for that matter pretty much any digital logic system we
 care to build.</div>
</p:notes><p:notes id="59" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s112642" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s112643" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s112643" class=N>Though not strictly necessary, it is
 advantageous to be able to partially resolve rules. If we start with a rule
 with two unknowns and one of these becomes known, we can replace the rule with
 one that only has one unknown. This is obviously likely to be more efficient
 than having to re-present the first bit of information every time.&#13;
 <div>&#13;</div>
 So that’s the essentials of expert systems. For the next part of the
 background we’ll take a look a quick look at some aspects of J2ME, but first
 I’ll give you a quick preview of the application I’m heading towards.</div>
</p:notes><p:notes id="18" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s115714" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s115715" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s115715" class=N>
 <div>Here is a block diagram of the system, with the data flow shown in
 yellow.&#13;</div>
 Ok, the core of the expert system is the knowledge base and inference engine. In
 addition we need a way of getting the knowledge base information into the system.
 To get the data in, it’ll need a loader to get the raw data and an interpreter
 to put this in a form the system can use, in other words as facts and rules.&#13;
 <div>&#13;</div>
 We want the system to ask the operator questions and then on the responses to these
 questions. For this interaction we will need a user interface. The main line
 of communication in the system will be between the operator and the inference
 engine, though I’ve put the dotted line in to show that in a problem-solving
 cycle the information supplied by the operator will be put into the knowledge
 base - that is to say that the knowledge base will act as its own working
 memory. There is a good reason for this, and it will call for an extra bit of
 coding, but I’ll come to that later.</div>
</p:notes><p:notes id="17" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s226306" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s226307" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s226307" class=N>Let’s now have a look at the target
 platform. Realising that different devices have different capabilities, Sun
 have layered<span style="mso-spacerun: yes">  </span>the high-level
 architecture of Java 2 Micro Edition. The KVM layer will be common to all
 mobile devices, but the layers above will vary from device to device, and each
 layer represents an increased level of specialization.&#13;
 <div>&#13;</div>
 Here is what we are looking at for devices with the kind of facilities that
 the Palm has.&#13;
 <div>&#13;</div>
 At the bottom we have the devices operating system, for example Palm OS 3.5.&#13;
 <div>&#13;</div>
 Next up we have the KVM, the K is generally agreed to stand for kilobyte - the
 space it needs is in the order of kilobyte. The KVM fulfils the same role as
 the JVM in the Java standard edition, providing the runtime environment in
 which bytecode can be executed.&#13;
 <div>&#13;</div>
 Then we have the CLDC - the Connected, Limited Device Configuration. This is a
 set of class libraries, which are really a very small subset of those found in
 the Java standard edition. I’ll say more about this in a minute.&#13;
 <div>&#13;</div>
 The CLDC is designed to be common across a range of devices with similar capabilities,
 for instance <span style='font-family:Palatino-Roman'>cell phones, pagers,
 PDAs, home appliances, and </span><span style='font-family:Palatino-Roman'>point
 of sale terminals. Although these devices share a similar level of </span><span
 style='font-family:Palatino-Roman'>functionality in terms of memory,
 processing power and connectivity, they </span><span style='font-family:Palatino-Roman'>may
 be vastly different in other respects, most notably the user interface. On </span><span
 style='font-family:Palatino-Roman'>the Palm we have a touch-sentsitive
 graphics capable screen, I forget exactly, </span><span style='font-family:
 Palatino-Roman'>about 160 pixels square, and a stylus for entering text and
 tapping on the </span><span style='font-family:Palatino-Roman'>screen. On a
 mobile phone we might only have a screen that can show two </span><span
 style='font-family:Palatino-Roman'>lines of text, and the number keys.&#13;</span>
 <div><span style='font-family:Palatino-Roman'>For this reason, the top level,
 profiles, are device-specific.&#13;</span></div>
 <div><span style='font-family:Palatino-Roman'><span style="mso-spacerun:
 yes"> </span>*************8&#13;</span></div>
 <span style='font-family:Palatino-Roman'>There isn’t much yet available in
 terms of profiles, the </span><span style='font-family:Verdana'>Mobile
 Information </span><span style='font-family:Verdana'>Device Profile </span><span
 style='font-family:Palatino-Roman'>being the most (ONLY?) notable at present.
 This is designed </span><span style='font-family:Palatino-Roman'>for use with
 devices like mobile phones and pagers.&#13;</span>
 <div><span style='font-family:Palatino-Roman'>****&#13;</span></div>
 <span style='font-family:Palatino-Roman'>There isn’t a profile designed for
 the Palm available yet, but this doesn’t stop </span><span style='font-family:
 Palatino-Roman'>up writing Java on the Palm.&#13;</span>
 <div>&#13;</div>
 <div>&#13;</div>
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="119" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s232450" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s232451" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s232451" class=N>These limitations might seem rather
 heavy - for example this list suggests that you wouldn’t be able to use Jini
 with cLDC. But there are ways of getting around most of these limitations, for
 instance work is being done on server-side surrogates to allow Jini to be used
 with mobile devices.</div>
</p:notes><p:notes id="36" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s116738" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s116739" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s116739" class=N>A total of 70 or so classes and
 interfaces.</div>
</p:notes><p:notes id="120" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s230402" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s230403"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s230403" class=N>The CLDC has already been standardised,
 and in advance of a Palm Profile becoming available Sun have provided a set of
 classes, kjava, that offer a bare minimum to be able to start programming with
 the CLDC on the Palm.&#13;
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="14" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s117762" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s117763" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s117763" class=N>If you’re familiar with the AWT or Swing
 the the kjava API might make you feel a little claustrophobic. Here we have a
 grand total of 20 classes and 2 interfaces. You can get a fair idea of their
 purpose from their names, but there are a couple I’d just like to point out.
 The Database class works as an interface to the Palm operating system database
 manager. I’ll be using it to access Memos. The Spotlet class is used for event
 handling, such as button presses and so on. Its operation is somewhat
 different from event handling in standard edition Java, but it’s pretty
 straightforward. &#13;
 <div>&#13;</div>
 I’m not going to go into the details of much of the kjava related code, this
 API is very limited and has a very limited shelf life. In fact a lot of Palm developers
 are currently other systems such as the J9 system from IBM instead, until a
 Palm Profile comes along.&#13;
 <div>&#13;</div>
 I’ll leave out description of the graphical components and the event handling as
 these are fairly easy to understand and you can take a look at my source code
 afterwards for an example of how to use them.</div>
</p:notes><p:notes id="12" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s238594" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s238595" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s238595" class=N>The main tools you need for developing
 in Java on the Palm are the compiler, which is the standard javac compiler, a
 preverifier that checks and modifies the bytecode to make it suitable for the
 Palm, and the makePalmApp to which makes a .prc file out of the preverified
 bytecode. The preverifier and makePalmApp come in the <span lang=EN-US
 style='mso-fareast-font-family:"Times New Roman";mso-hansi-font-family:Verdana'>J2ME
 CLDC/KVM Palm Release</span> package. The .prc file can be loaded onto the
 Palm in the regular way using hotsync.&#13;
 <div>&#13;</div>
 To run KVM applications you will also need the KVM itself, and a utility which
 comes with it called KVMutil. You’ll find these in the package as well.&#13;
 <div>&#13;</div>
 Sun provide a simple emulator for testing your code, but in my experience this
 isn’t too useful. There’s also the Palm OS Emulator, POSE, available to download
 from the Palm’s developer site. &#13;
 <div>I like POSE.</div>
 </div>
</p:notes><p:notes id="122" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s235522" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s235523" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s235523" class=N>It’s<span style="mso-spacerun: yes"> 
 </span>is one of the best device emulators I’ve ever come across. THis is what
 it looks like on screen. It emulates the Palm at a hardware level, and to get started
 you have to load a ROM image of the operating system. This means that emulator
 behaves exactly like the real device, except you use the PC’s mouse and
 keyboard instead of a stylus. &#13;
 <div>&#13;</div>
 I’m afraid I’m one of these people who tends to fiddle around with new gadgets
 and only look at the manual when I’ve broken something. I didn’t realise my
 Palm had a backlight until I switched it on by accident on the emulator.&#13;
 <div>&#13;</div>
 Different ROM images are available, for all the different Palm models, and here
 I’ve got the Palm five version loaded.</div>
</p:notes><p:notes id="123" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s237570" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s237571"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s237571" class=N>So back to the Expert System. Here’s the
 block diagram again. I’ll now have a look at modelling the knowledge base.</div>
</p:notes><p:notes id="31" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s52226" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s52227" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s52227" class=N>At the top level, the model for the
 knowledge base is trivial, all we have is a list of facts and a list of rules.
 Let’s have a look at what will be going into these lists.</div>
</p:notes><p:notes id="28" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s120834" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s120835" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s120835" class=N>If we look at some of the facts we have
 already encountered we can start building a model of them. &#13;
 <div>&#13;</div>
 The system is going to be asking the operator questions, and if you look at
 the fact ‘the light is red’ we can modify it a little to make it into a
 question, and use this directly in the user interface. Remember that the
 actual text of the facts has no real meaning to the system, but we can easily
 use an attribute to denote whether or not the fact is a question.&#13;
 <div>&#13;</div>
 I marked a couple of the facts earlier as goals, because they represented
 target solutions to the system. This information we can also easily
 incorporate into the model by adding a ‘goal’ attribute, which can also be
 true or false.&#13;
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="30" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s119810" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s119811" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s119811" class=N>
 <div>So here we have those two facts in a model.<span style="mso-spacerun:
 yes">  </span>&#13;</div>
 We all make mistakes, and here is an annoying one of mine. I must apologise for
 the use of the variable name ‘value’, I should have chosen this better as it’s
 a source of confusion.</div>
</p:notes><p:notes id="32" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s121858" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s121859" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s121859" class=N>Here is the same thing again, with a bit
 more of an object look about it.</div>
</p:notes><p:notes id="79" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s239618" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s239619" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s239619" class=N>Notice that a fact can take one of two
 roles in a rule, it can either be a condition or the consequence of the rule.
 We need to somehow reflect this in the model.</div>
</p:notes><p:notes id="33" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s59394" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s59395" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s59395" class=N>After a lot of playing around, I
 eventually came up with these classes for the facts.&#13;
 <div>&#13;</div>
 I’ve got the value, goal and question attributes in a base class, from which
 I’ve extended two subclasses. The first of these is a general purpose kind of
 fact to which I’ve added an ID variable. I mentioned that the knowledge base
 would also be used as the working memory, and so to hold the state of the fact
 I’ve added two attributes. Stateknown is simply a flag to say whether or not
 we know the state of the fact. Affirmed is used when we do know the state,
 which can be true or false. I’ve separated out the condition as a separate
 class as conditions will need special handling. Note that I’ve only put a
 negated attribute, to signify the logical NOT operator, in the condition
 class. I’ll return to that shortly.</div>
</p:notes><p:notes id="37" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s123906" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s123907" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s123907" class=N>If we look at the attributes of the fact
 class, we have a series of variables of the same type. To me this is crying
 out for a data structure. The attributes and values come in pairs, and so this
 suggests a Hashtable. There is a minor problem with this, in that boolean
 types are primitives and the Hashtable class can only hold objects. It’s easy
 enough to work around this though.&#13;A very important question we have to
 ask now is - ‘does the CLDC include a HashTable class’? </div>
</p:notes><p:notes id="35" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s118786" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s118787" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s118787" class=N>Luckily the answer is yes. We have the
 main data structures of JDK 1.1 : the HashTable, Vector and Enumeration.&#13;
 <div>&#13;</div>
 When you’re designing for the CLDC its important to keep a close eye on these
 classes, using the Javadoc documentation or whatever as there are other potential
 problems hiding in the detail. For instance, the Java 2 version of the Vector
 class includes the methods add() and addAll(), which aren’t included in the
 CLDC version. </div>
</p:notes><p:notes id="34" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s124930" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s124931" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s124931" class=N>To hold the list of fact attributes,
 I’ve created a subclass of Hashtable with a couple of wrapper methods. &#13;Here
 we a method to put an attribute-value pair into the Hashtable, in which the
 pair will be represented with the attribute as an object and the value as the string
 true or the string false. Similarly there’s a method to get the values back out
 again.&#13;
 <div>&#13;</div>
 The object the attributes will be represented by in this app will simply be
 the string of that attributes name, ‘goal’, ‘question’ or whatever. Rather
 than demand that the argument be a string, I left this open as an object, in
 case I wanted to put anything else in later.&#13;
 <div>&#13;</div>
 The values of the attributes going into the methods are booleans, and I could
 if I’d have wanted wrap these with the Boolean class provided in the API for
 just such a purpose. I thought as I was putting the app together that it would
 be useful to store these values as the strings ‘true’ or ’false instead, to
 make displaying the contents of the Hashtable a little easier. As it happens,
 in retrospect I think using the Boolean class would have been better, but changing
 that can wait for version 2. &#13;
 <div>&#13;</div>
 In the getBoolean() method, you may notice that if the value found in the HashTable
 is null, the method will return false. In normal circumstances this would have
 been rather poor style, as the null value could have been caused by an error
 somewhere, but still the method returns a valid value of false. In this app
 however, I’ll be using<span style="mso-spacerun: yes">  </span>this as a
 feature - if an attribute has no value, in other words is null, then I will
 interpret this as a default value of false. &#13;
 <div>If you don’t like it, shoot me down in flames.</div>
 </div>
</p:notes><p:notes id="38" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s63490" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s63491" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s63491" class=N>Going back to the fact classes, here is
 the start of the superclass. The attributes and their values are held in a
 hashtable of the type I’ve just described. The value string is the text of the
 fact, like ‘the light is green’. &#13;The value and id member variables have
 regular get and set methods, which aren’t very interesting.</div>
</p:notes><p:notes id="39" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s125954" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s125955" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s125955" class=N>These methods are of marginally greater
 entertainment value. I’ve duplicated the line at the top for clarity. The
 first two methods are just accessor methods for the hashtable, and the next
 two use these to get and set the value of the goal attribute.<span
 style="mso-spacerun: yes">  </span>You might think that there’s quite a bit of
 redundant coding with all these set and get boolean methods, which is true,
 but it has the advantage of hiding the data structure behind it.&#13;The rest
 of the KFactBase class is just a series of getters and setters for the other
 attributes.</div>
</p:notes><p:notes id="27" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s54274" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s54275" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s54275" class=N>Now we come to modelling the rules. I
 think its fairly clear how a class like this could hold a rule of the type
 :&#13;
 <div>&#13;</div>
 <div>IF facta AND factb THEN factc&#13;</div>
 <div>&#13;</div>
 As I mentioned earlier, I’ve taken the negated attribute out of the consequent
 fact the attribute which says whether or not the consequent fact is negated - I’ve
 moved it to the containing rule. As it turned out, the methods that use this attribute
 are associated with the rule rather than the fact.</div>
</p:notes><p:notes id="40" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s126978" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s126979" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s126979" class=N>To the rule class I’ve added a variable
 that will be used in process time - a flag to mark when the rule has been
 fired, in other words when all the conditions of the rule have been satisfied.</div>
</p:notes><p:notes id="41" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s84994" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s84995" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s84995" class=N>Here together are all the classes of the
 knowledge base. The whole domain is contained in KDomain, which has two
 Vectors, one for the facts and one for the rules. The domain has a name, which
 is simply held in a string. KDomain also has a lookup table, another
 hashtable, to quickly get a fact given it’s text value.&#13;
 <div>&#13;</div>
 The KRule class has a hashtable of conditions an Id number and a flag to say
 if the consequence of the rule should be negated, and another to say if the
 rule has fired. It’s not shown here, but rule will also remember the id number
 of the fact that is its consequence.&#13;
 <div>&#13;</div>
 <div>The KFact and KCondition classes are both descended from KFactBase.&#13;</div>
 <div>&#13;</div>
 The KFact class has an extra Vector rulerefs to hold references to the rules
 in which each fact actually occurs. This list will be used by the inference
 engine.&#13;
 <div>&#13;</div>
 <div>Lets have a look at the inference engine&#13;</div>
 <div>&#13;</div>
 <div>&#13;</div>
 <div>&#13;</div>
 <div>&#13;</div>
 <div>&#13;</div>
 <div>Lookup??? &#13;</div>
 The KFact object has a member rulerefs, which will be used in the inference engine.</div>
</p:notes><p:notes id="56" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s82946" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s82947" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s82947" class=N>Two methods of inferencing from facts and
 rules are commonly used in Expert Systems, forward chaining and backward
 chaining.&#13;
 <div>&#13;</div>
 forward goes from facts to conclusions, for example, if it is raining, then I should
 carry an umbrella&#13;
 <div>&#13;</div>
 backward chaining works the other way - for example, if a person comes in wet,
 you can hypothesize that it’s raining. If you ask them and they answer yes,
 then then your hypothesis has be proved correct.&#13;
 <div>&#13;</div>
 <div>In this application I’ve used forward chaining.</div>
 </div>
</p:notes><p:notes id="57" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s135170" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s135171" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s135171" class=N>
 <div>The algorithm I’ve used is quite simple, and these are the steps.&#13;</div>
 <div>&#13;</div>
 This should become a lot clearer when I show you an example of it in operation
 later.&#13;
 <div>&#13;</div>
 You should be able to imagine pretty well how this is coded, it doesn’t make very
 interesting reading, but it’s all there in the source. The class in the application
 that contains this is called KEngine.&#13;
 <div>&#13;</div>
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="85" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s138242" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s138243"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s138243" class=N>Here the block diagram of the system
 again, and this time I’ve filled in the relevant names of the classes in the
 application. We’ve looked at the Inference Engine and Knowledge Base already,
 so I’ll move on to the parts of the application that are responsible for
 getting data into the application.&#13;
 <div>&#13;</div>
 You’ve seen the kind of data the application will be using, facts and rules. This
 are fairly human friendly, and we might wish to edit these on the Palm itself.
 Rather than designing a new data store on the Palm, we can use an existing
 one, Palm Memos. This gives us an easy way of editing the data on the Palm
 itself, and additionally Palm Memos, means that the data can be prepared on
 the desktop and downloaded to the Palm using the sync facility.&#13;
 <div>&#13;</div>
 We’ve seen that rules and facts can be expressed in text easily enough, for instance,
 one fact was ‘the light is red’ and a rule was<span style="mso-spacerun:
 yes">  </span>‘IF the light is red THEN apply the brake’. The only problem
 with this though is that we want to also say that the fact ‘apply the brake’
 is a goal, and use ‘the light is red’ as a question, ‘Is the light red?’. So
 to be able to store the data in memos we need a text format that will be
 composed of things like facts and rules, which we can call elements, and these
 elements will have attributes. &#13;
 <div>&#13;</div>
 <div>Now I wonder if there’s a text format built of elements and
 attibutes?<span style="mso-spacerun: yes">   </span>&#13;</div>
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="88" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s157698" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s157699" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s157699" class=N>No, this isn’t the format I was thinking
 about, it’s just that I’d have liked a drum roll, but a picture of the opening
 bars of the 2001 - A Space Odyssey theme will have to do.&#13;
 <div>The format is of course...</div>
 </div>
</p:notes><p:notes id="42" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s139266" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s139267" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s139267" class=N>
 <div>XML&#13;</div>
 <div>&#13;</div>
 <div>As it happens XML is absolutely perfect for representing facts and
 rules.&#13;</div>
 <div>&#13;</div>
 I’d go even further, and say that if you were on a desert island designing a
 text format for expressing this kind of knowledge, I think the chances are
 you’d come up with something very like XML.&#13;
 <div>&#13;</div>
 <div>Here’s a first attempt at expressing facts and rules in XML. &#13;</div>
 <div>&#13;</div>
 We have the knowledge base domain as the document root, and this can contain
 facts and rules. The rule element contains elements itself, the conditions and
 consequence fact. We can express this relationship very easily by nesting the
 tags. </div>
</p:notes><p:notes id="43" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s140290" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s140291" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s140291" class=N>Our facts will have a text value and
 attributes, and this is also easy to express in XML. Using the full words for
 the different parts of elements makes it very human friendly.&#13;
 <div>&#13;</div>
 When I referred earlier to attributes having null values being considered
 false, you can see here what I meant.&#13;
 <div>&#13;</div>
 To save a bit of typing, we can give the attributes a default value, in this
 case false. So the second line here can convey exactly the same information to
 our system as the first.&#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="46" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s141314" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s141315" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s141315" class=N>
 <div>A rule is just as easy to represent. &#13;</div>
 <div>Here we have a rule with two conditions, the second on negated.&#13;</div>
 <div>&#13;</div>
 I’ve put the consequent fact before the conditions because each rule may only have
 one consequence, whereas it can have any number of conditions.&#13;
 <div>&#13;</div>
 This rule about a helicopter might seem a bit strange, but to develop the system
 I needed to have a small set of facts and rules to play with, that I wouldn’t
 have any trouble thinking about.&#13;
 <div>&#13;</div>
 <div>So I can up with the following :</div>
 </div>
</p:notes><p:notes id="45" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s70658" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s70659"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s70659" class=N>
 <div><span lang=EN-US style='mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:Verdana;font-size:117%'>Consider this the English
 representation of an expert</span><span lang=EN-US style='font-family:Verdana;
 mso-fareast-font-family:"Times New Roman";mso-hansi-font-family:Verdana;
 font-size:117%'>’</span><span lang=EN-US style='mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:Verdana;font-size:117%'>s knowledge. &#13;</span></div>
 <div><span lang=EN-US style='mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:Verdana;font-size:117%'>&#13;</span></div>
 <span lang=EN-US style='mso-fareast-font-family:"Times New Roman";mso-hansi-font-family:
 Verdana;font-size:117%'>I</span><span lang=EN-US style='font-family:Verdana;
 mso-fareast-font-family:"Times New Roman";mso-hansi-font-family:Verdana;
 font-size:117%'>’</span><span lang=EN-US style='mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:Verdana;font-size:117%'>ll use this to create a sample
 knowledge base for the expert </span><span lang=EN-US style='mso-fareast-font-family:
 "Times New Roman";mso-hansi-font-family:Verdana;font-size:117%'>system.&#13;</span>
 <div><span lang=EN-US style='mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:Verdana;font-size:117%'>&#13;</span></div>
 <span lang=EN-US style='mso-fareast-font-family:"Times New Roman";mso-hansi-font-family:
 Verdana;font-size:117%'>The purpose of the application will then be to ask
 questions related </span><span lang=EN-US style='mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:Verdana;font-size:117%'>to this knowledge to determine
 whether a particular thing is a </span><span lang=EN-US style='mso-fareast-font-family:
 "Times New Roman";mso-hansi-font-family:Verdana;font-size:117%'>mouse, bird,
 helicopter or stone.</span><span style='mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:Verdana;font-size:117%'> </span><span style='mso-hansi-font-family:
 Verdana;font-size:117%'><span style="mso-spacerun: yes"> </span>&#13;</span>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="44" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s142338" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s142339" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s142339" class=N>
 <div>This is part of the same knowledge put into XML. &#13;</div>
 <div>&#13;</div>
 We have a standard header, with the XML version and document encoding. The
 UTF-8 encoding is <span lang=EN-US style='font-family:"Baskerville BE Regular";
 mso-ascii-font-family:"Baskerville BE Regular";mso-fareast-font-family:"Times New Roman"'>an
 ASCII-compatible Unicode used by Java.&#13;</span><span lang=EN-US
 style='font-family:"Baskerville BE Regular";mso-ascii-font-family:"Baskerville BE Regular";
 mso-fareast-font-family:"Times New Roman"'>We also have a line which
 specifyies the Document Type Definition for the </span><span lang=EN-US
 style='font-family:"Baskerville BE Regular";mso-ascii-font-family:"Baskerville BE Regular";
 mso-fareast-font-family:"Times New Roman"'>XML. This can be used for
 validating the XML, though we won’t actually be </span><span lang=EN-US
 style='font-family:"Baskerville BE Regular";mso-ascii-font-family:"Baskerville BE Regular";
 mso-fareast-font-family:"Times New Roman"'>doing that on the Palm itself.&#13;</span>
 <div><span style="mso-spacerun: yes"> </span>&#13;</div>
 We then have the four possible outcomes : stone, helicopter, bird and mouse, all
 of which are facts that can potentially be true or false, and all of which are
 goals.&#13;
 <div>The next two are facts that we can use as questions. &#13;</div>
 <div>&#13;</div>
 I’ve made the representation a bit more complicated than it really needs to
 be, by separating the ‘alive’ information into two facts, here shown in yellow
 - one is the question, ‘Is it alive’, and the other is just a plain fact
 ‘alive’. </div>
</p:notes><p:notes id="49" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s143362" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s143363" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s143363" class=N>
 <div>Here are a couple of the rules from the knowledgebase. &#13;</div>
 <div>&#13;</div>
 The first rule has as its consequent the ‘alive’ fact and as its condition the
 ‘Is it alive’ question. &#13;Ok, so it’s pretty redundant to have a rule that
 says ‘If it’s alive then it’s alive’, but remember this is a human
 interpretation of the text - as far as the system will be concerned ‘Is it
 alive’ and ‘alive’ are two completely different facts, and their only
 relationship is that defined by the rule.&#13;
 <div>&#13;</div>
 The second rule here represents IF NOT alive AND can it fly THEN Helicopter,
 which is logically the same as our expert’s knowledge that <span lang=EN-US
 style='mso-fareast-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman";
 font-size:117%'>a </span><span lang=EN-US style='mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:"Times New Roman";font-size:117%'>helicopter can fly but
 isn't alive.&#13;</span>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="48" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s144386" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s144387" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s144387" class=N>
 <div>He’s the DTD of the knowledge base XML format.&#13;</div>
 <div>&#13;</div>
 As I said, this won’t actually be used on the Palm, but it can potentially be used
 in desktop applications to validate the XML. Having a DTD is useful in any
 case to formalise the data structure.&#13;
 <div>&#13;</div>
 There’s going to be an element called domain that is comrised of one or more facts
 and one or more rules. The domain will also have some character data associated
 with it which will be called name.&#13;
 <div>&#13;</div>
 The element called fact will contain parsed character data, in other words
 text that we want to read. This is the text value of our fact, such as ‘can it
 fly’.&#13;The element called fact will have three attributes, labelled goal,
 question and negated. Each of these attributes may contain the string ‘true’
 or the string ‘false’. If the attribute isn’t specified then the default value
 will be false.&#13;
 <div>&#13;</div>
 There will be an element called rule, which will contain one fact as defined above
 (this is our consequence), and one or more conditions.&#13;
 <div>&#13;</div>
 The condition element will contain parsed character data and will have an attribue
 called negated that can contain true or false.</div>
</p:notes><p:notes id="54" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s145410" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s145411" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s145411" class=N>Memos on the Palm are listed by their
 first first line, and if we key in XML we get a listing like number 2. on the
 slide. What’s worse is that every XML memo would look like this, which I think
 you’ll agree isn’t exactly informative.&#13;
 <div>&#13;</div>
 So I’m going to give the Memos a title line, which will be the word Kex followed
 by the name of the knowledge base in inverted commas. This certainly isn’t
 well-formed XML, so I can only hope there aren’t any consortium enforcers in
 the room. One thing about this new title line is that it is machine readable -
 the word Kex identifies it as a memo for the Kex application, and the title of
 the knowledge base is conveniently delimited by the quotes.</div>
</p:notes><p:notes id="86" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s147458" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s147459" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s147459" class=N>Here’s what part of the memo will look
 like - OK, it’s pretty ugly on a Palm screen, and it might get confusing doing
 anything but simple edits. But don’t forget we can write memos on the desktop
 and transfer them to the Palm.&#13;
 <div>&#13;</div>
 So now we’ve got an XML representation of a knowledge base onto the Palm, lets
 see how we can read it into the expert system.</div>
</p:notes><p:notes id="47" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s148482" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s148483" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s148483" class=N>When I showed you the list of kjava
 classes, I highlighted the Database class. This is the one we can use to read
 in memos.&#13;
 <div>&#13;</div>
 The methods and fields are pretty self-descriptive, but the Database constructor
 needs a little explanation.</div>
</p:notes><p:notes id="51" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s149506" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s149507" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s149507" class=N>The constructor takes three parameters,
 type ID, creator ID and mode. The first two correspond directly to fields
 found in the Palm OS database system. The creator ID is refers to the
 application that made the database, the typeID to the type of content. The
 mode can be READONLY, READWRITE or WRITEONLY. The values here are those that
 we can use to read memos into the application.&#13;
 <div>&#13;</div>
 Note that the values of these parameters are of type int - though the values represent
 four characters of text, they are stored as pretty horrible big numbers. Fortunately
 it’s easy enough to write a converter to change the text into the number.&#13;
 <div>&#13;</div>
 Another important point about the constructor is that by creating an instance
 of the<span style="mso-spacerun: yes">  </span>database class, you are at the
 same time opening that database (if it exists) ready for reads or writes.&#13;
 <div>&#13;</div>
 All the memos on the Palm are contained in one database, which when stored on
 a desktop would be called MemoDB.pbd. &#13;Each memo is stored as a record,
 and it is straightforward to read these records. There is a big drawback with
 kjava though - we have to read a whole record at a time, there is no facility
 for partial reads. In the documentation it describe a method for partial
 reads, but says ‘this method has not yet been implemented’. Thanks.&#13;
 <div>&#13;</div>
 In this application this causes a major problem, as I’m identifying the memo by
 the first line, as you do when you’re using the Memo application, but this means
 that potentially I’m going to have to read in the whole of every other memo
 until I get to the one I’m looking for. I’ll come back to this issue shortly.&#13;
 <div>So how do we read the memos?&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="53" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s150530" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s150531" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s150531" class=N>I’ve created a class called KMemoReader
 for this purpose. The class can through an XException, which is a simple
 extension of the Exception class I made to help with debugging. We create a
 database with a typeId of DATA and CreatorId of memo, here shown in their
 horrible integer form. Constructing a Database instance opens the database, so
 I’ve got a check to make sure that the database is open, which it should be if
 the memo database exists.&#13;
 <div>&#13;</div>
 <div>Here I’ve also got a simple method to close the database.</div>
 </div>
</p:notes><p:notes id="50" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s151554" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s151555" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s151555" class=N>We get the contents of a memo as a byte
 array, and this is the method that I use to do it. I provide the name of the
 memo as a string. Each memo is stored as a numbered record, and I simply step
 through all of these until I find the one I’m looking for. </div>
</p:notes><p:notes id="55" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s152578" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s152579" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s152579" class=N>This is how I test to see if I’ve found
 the memo I’m looking for. I decided to label the Kex memos with the word Kex
 and the name of the knowledge base. This code snippet does a bit of pattern
 matching to see if the memo starts this way. I’ve delimited the name in the
 memo with inverted commas, so I wrap the name here with these before doing the
 test. &#13;
 <div>&#13;</div>
 The string class has a regionMatches method which I can use for the test, and as
 I’m only interest in the first line, I pull out the first 20 characters of the
 record byte array and make a string out of these called head. &#13;If the
 start of the memo matches Kex, then it checks for a match with the name.&#13;
 <div>&#13;</div>
 When the method finds the record I’m looking for, in other words the memo containing
 the knowledge base I’ve specied, it returns it.&#13;This will give the system
 a load of text in XML format and now it has to make sense of it.</div>
</p:notes><p:notes id="87" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s154626" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s154627" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s154627" class=N>We get the information out of<span
 style="mso-spacerun: yes">  </span>XML by parsing it. The word ‘parse’ is
 lifted from English grammar, where it means resolving a sentence into its components
 parts - though as you can see it’s already made it’s way into the Oxford
 Conscise Dictionary in its computing sense. &#13;
 <div>&#13;</div>
 The de facto standard tool for parsing XML is SAX, the Simple API for XML. The
 best known version is written for Java, but versions are available that can be
 used with C++ and even Visual Basic. Not long ago a more mature SAX2 showed
 its face, but we needn’t worry about that here. You see the thing is that SAX
 is designed for the standard edition of Java, and we haven’t got that on a Palm.
 There are cut-down versions available, but as all this application needs is
 the ability to recognise simple elements and their attributes, it won’t be too
 difficult to code. It also means that we won’t be carrying any surplus functionality.
 &#13;
 <div>&#13;</div>
 If you want to build your own XML parser, then the SAX source code is the first
 place to look. Depending on the version, you’ll find there are 200 plus classes.<span
 style="mso-spacerun: yes">  </span>My cut-down version cobbles everything
 needed together into justtwo classes. &#13;
 <div>&#13;</div>
 There is a little known Java tool specifically for parsing and lexical
 analysis, the Java Compiler Compiler.&#13;
 <div>&lt;javacc&gt;&#13;</div>
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="61" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s90114" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s90115"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s90115" class=N>The technique SAX uses to extract
 information from XML works like this - the document is scanned, and while this
 scanning is taking place, events are triggered by the syntax of the XML. A
 handler we have built reacts to these events. This is a good, tried and tested
 pattern, so I copied it for the parser in this application.&#13;
 <div>&#13;</div>
 <div>To make it a bit clearer, here’s another view.&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="62" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s155650" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s155651" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s155651" class=N>Ok, the parser reads through the XML in
 the order it appears in the text file. When it encounters a bit of text it
 recognises, in other words a regular expression, it will call a method in an
 event handler.&#13;So here when the the start of the document is encountered,
 the startDocument method of the handler gets called. Similarly when other
 pieces of information are encountered, such as the start of an element, the
 handler gets called, and parameters are passed representing the name of the
 element and any attributes it has. It is our responsibilty to take these
 messages that appear in the same order as in the XML text and from them create
 a data structure we can work with. With Java 2 there is DOM, the Document
 Object Model, available for this purpose, but on the Palm we don’t have that
 luxury.</div>
</p:notes><p:notes id="63" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s159746" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s159747" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s159747" class=N>The events I’m interested in can be seen
 as method specifications in the handler interface. The attributes of an
 element will be passed in a KHashtable object, as a series of attribute-value
 pairs.</div>
</p:notes><p:notes id="65" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s160770" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s160771" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s160771" class=N>
 <div>Here is the start of the parser code.&#13;</div>
 <span style="mso-spacerun: yes"> </span>We have a document handler to handle
 the parse events, a byte array that will contain the XML data we wish to
 parse, a counter to keep track of where we are in the text and a constant that
 will be used to tell when we’ve reached the end of the data.&#13;The first two
 methods here just point the parser at the source data and tell it which which
 document handler to use.<span style="mso-spacerun: yes">  </span>The third
 method here will be called when we wish to parse the the text. The internals
 of this parsing are looked after by a method called readDoc, which itself will
 call various helper methods.</div>
</p:notes><p:notes id="66" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s161794" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s161795" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s161795" class=N>Here are some of the helper methods. The
 first reads a single character from the byte array, which is returned, but
 also maintained as an instance variable. It will take the value of the END
 constant when all characters have been read.&#13;
 <div>&#13;</div>
 The isWhite method check to see if the character is so-called white space. In usual
 XML terms this refers to spaces, newlines and returns, but here the method
 extends to ignore a range of other characters that we don’t need.&#13;
 <div>&#13;</div>
 The read white method will step through any block of text that is considered white
 space, effectively swallowing it and doing nothing but moving the pointer in
 the byte array along. </div>
</p:notes><p:notes id="67" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s162818" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s162819" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s162819" class=N>Here are a couple more helper methods in
 the parser. The first will read any sequence of characters, including letters
 digits and white space and return these as a string. The second method will do
 the same kind of thing for a block of text, but will stop at any spaces, very
 like reading a single word from a sentence, hence the method name.</div>
</p:notes><p:notes id="70" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s163842" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s163843" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s163843" class=N>The logic behind the parsing is carried
 out in the readDoc method, and that’s where this snippet comes from. It’s
 pretty crude, and more or less assumes the XML will be well formed, unlike the
 SAX parser that can provide thorough validation. This part of the code
 interprets the opening tag of an element. It’s really just a series of
 conditionals, and the conditions change as the parser reads through different
 parts of the XML. An example of what it might be looking at is shown at the
 top of the slide.&#13;
 <div>&#13;</div>
 &lt;talk through&gt; The last line in the snippet call the start element
 method of the handler.&#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="71" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s164866" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s164867" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s164867" class=N>This section pulls out the text content
 of the element and recognises a closing tag. &#13;
 <div>&lt;describe&gt; </div>
 </div>
</p:notes><p:notes id="69" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s165890" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s165891" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s165891" class=N>Here is part of the document handler
 that is called when a startElement is encountered. This handler is really a
 state machine, and the chief state it deals with is the level of nesting.
 Here, if the nesting variable has a value of one, this means the tag being
 examined is the root, so the name of the domain can be extracted from the
 attributes hashtable sent by the parser.</div>
</p:notes><p:notes id="72" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s166914" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s166915" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s166915" class=N>Here we have the code that looks after
 the next level of nesting. Here in our format the elements can either be facts
 or rules. If the element is a fact, then this is recorded in an instance
 variable tag. This is really another part of the state machine, and the state
 here could be described as ‘within fact element’. A new fact object is
 created, and the attributes of that fact are set from the attribute-value
 hashtable.&#13;If the element was found to be a rule, then a new rule is
 created and added to the domain. Note that at this stage we can only deal with
 the opening tag, such as those shown in yellow at the bottom.&#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="73" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s167938" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s167939" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s167939" class=N>We have a similar case again for the
 next level of nesting where the element can either be a fact or condition.
 Again the state is recorded, which here could be RULEFACT, in other words the
 consequent fact of a rule or CONDITION. If the element is a condition then we
 proceed to create a new condition object and set its attributes.</div>
</p:notes><p:notes id="74" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s168962" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s168963" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s168963" class=N>When the text within an element is read,
 the parser calls the characters method of the handler. Whether the element is
 a simple fact or one contained within a rule, the text value of that object
 will be set.&#13;Note that in the case of it being the consequent fact of a
 rule, we pass its negated attribute to the containing rule, the best place for
 the inference engine to get at it.</div>
</p:notes><p:notes id="89" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s175106" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s175107" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s175107" class=N>I’ve set things up so that the knowledge
 base will also act as the working memory. The upshot of this is that after you
 have, for example, used it for tree recognition and identified an oak tree,
 all the knowledge base knows about from then on is an oak. So every time you
 want to use on a new tree, the knowledge base needs refreshing into its virgin
 state.&#13;
 <div>&#13;</div>
 Earlier, I pointed out that the time taken to find and load a Memo was a problem
 - it really is slow. So rather than have the system reloading the data every
 time, I load the knowledge base into the system once, and then make a copy.
 The copy is the one that is used to identify the tree. When I want to identify
 another tree, I simply make a fresh copy of the already loaded knowledge base.
 In practise this is much much quicker.&#13;
 <div>&#13;</div>
 <div>However, there is a snag.</div>
 </div>
</p:notes><p:notes id="90" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s176130" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s176131" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s176131" class=N>Take a look at this code - I create two
 instances of the class Vector, a and b. I add an element, the string “test”
 into a. I then copy Vector a into Vector b, and do a printout. I then remove
 all the elements from a and do another printout.&#13;The fact that Vector a
 and b were separate instances would suggest that they can be operated upon
 independently. If I use the equals operator to do the copy, this isn’t the
 case. When I clear one vector the other gets cleared as well. This is because
 the equals operator isn’t actually copying the vector, only the reference to
 it.</div>
</p:notes><p:notes id="93" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s177154" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s177155" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s177155" class=N>In Java 2 most of the classes in the
 Collections framework, such as Vector, have a constructor that allows us to
 make a completely independent copy of the collection. As you can see here, the
 constructor takes as its argument the collection you want to copy. As you can
 see from the output, this is the kind of copy we need for the knowledge
 base.&#13;
 <div>&#13;</div>
 Unfortunately, the CLDC versions of the Vector and Hashtable classes don’t have
 a deep-copy constructor, so I had to make my own.</div>
</p:notes><p:notes id="92" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s178178" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s178179" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s178179" class=N>
 <div>Here’s a constuctor I made for the KHashtable class. &#13;</div>
 It takes as its argument another KHashtable. First it calls its super class, hashtable,
 to create a new instance. Then it gets, one at a time, the elements of the
 khashtable it was sent and puts these into itself.&#13;
 <div>This fulfils the requirement for a deep copy.&#13;</div>
 As I needed to make a deep copy of the whole knowledge base, I had to create a
 constructor like this for all the knowledge base classes.&#13;
 <div>&#13;</div>
 I’ve covered all that I can in the time about the knowledge base and data loading
 mechanism, the one remaining part of the system is the user interface.</div>
</p:notes><p:notes id="94" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s188418" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s188419" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s188419" class=N>
 <div>&#13;</div>
 Here’s the screen you see when you fire up the application. There is a text entry
 field to take the name of the knowledge base, and a check box to specify whether
 or not a log of the run is required.</div>
</p:notes><p:notes id="95" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s189442" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s189443" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s189443" class=N>I’ve filled it in, so now I can tap
 load.</div>
</p:notes><p:notes id="101" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s190466" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s190467" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s190467" class=N>The application has to look through each
 memo in turn until it gets to the one you’ve requested. I’ve included a simple
 progress indicator, where an asterisk is added for every memo that it reads.</div>
</p:notes><p:notes id="97" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s191490" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s191491" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s191491" class=N>If I miskeyed, or the specified memo
 doesn’t exist I get this screen. Clicking ok takes me back to the start
 screen.</div>
</p:notes><p:notes id="98" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s192514" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s192515" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s192515" class=N>When the knowledge base has been loaded,
 this screen is presented. When I’m ready to start I tap the button.</div>
</p:notes><p:notes id="99" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s193538" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s193539" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s193539" class=N>I’m then presented with a question. When
 I tap one of the possible responses, the system goes away and the inference
 engine will processes this new information. When it’s thought about it for a
 bit, the application will then present me with a different question on this
 same screen. This cycle will continue until there are no questions left or a
 goal has been reached.</div>
</p:notes><p:notes id="100" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s194562" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s194563" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s194563" class=N>Here a goal has been found. Tapping ok
 takes me back to the start screen.</div>
</p:notes><p:notes id="75" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s179202" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s179203" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s179203" class=N>The program flow of the application is
 based around this state diagram, which shows the essence of the user
 interface. &#13;
 <div>&#13;</div>
 Each of the red block here corresponds to one of the screens the system can display.&#13;
 <div>&#13;</div>
 The message state is a transitory one where the application will display a ‘please
 wait’ kind of message.&#13;
 <div>&#13;</div>
 Most of the time in a run will be spent in the loop around query and the message
 below it. This is where the inference engine will be doing its work.&#13;
 <div>&#13;</div>
 Even if you’re using the Extreme Programming technique of continually running
 unit tests on every important method in your application, you can still have
 problems finding a bug or error in your data when you put the whole thing
 together. A good way of dealing with this circumstance is to provide a good
 logging facility.&#13;
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="117" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s214018" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s214019"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s214019" class=N>
 <div>&#13;</div>
 <div>Logging with the KVM on the Palm couldn’t be easier.&#13;</div>
 <div>&#13;</div>
 The KVMutil application that comes with the KVM has an option to save output.&#13;
 <div>&#13;</div>
 If you put System.out.print calls in your code, as you would to get console output
 using standard edition Java, on the Palm these get stored and can be viewed by
 tapping the ‘View Output’ button.&#13;
 <div>&#13;</div>
 With an expert system a logging facility can be very useful to the end user as
 well, as it can provide an explanation of how a particular conclusion was reached.&#13;For
 this reason I’ve made the logging of Kex human readable and fairly verbose.&#13;
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="114" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s208898" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s208899"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s208899" class=N>So if we start the application and check
 the log box, the system will start logging...</div>
</p:notes><p:notes id="116" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s215042" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s215043" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s215043" class=N>...and if you quit the application and
 go into KVMutil and select ‘view output’ the log will look something like
 this.&#13;
 <div>&#13;</div>
 These screen shots aren’t<span style="mso-spacerun: yes">  </span>altogether
 clear, so I’ve copy &amp; pasted the log of a trial run into slides instead.
 &#13;
 <div>&#13;</div>
 This was easy because when you use the POSE emulator, the contents of standard
 out gets saved as a text file.&#13;
 <div>&#13;</div>
 <div>&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="102" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s216066" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s216067" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s216067" class=N>
 <div>So here we go&#13;</div>
 <div>&lt;describe&gt;</div>
 </div>
</p:notes><p:notes id="103" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s240642" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s240643" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s240643" class=N>&lt;describe&gt;</div>
</p:notes><p:notes id="104" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s241666" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s241667" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s241667" class=N>&lt;describe&gt;</div>
</p:notes><p:notes id="105" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s242690" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s242691" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s242691" class=N>
 <div>&lt;describe&gt;&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="106" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s243714" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s243715" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s243715" class=N>
 <div>&lt;describe&gt;&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="107" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s244738" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s244739" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s244739" class=N>
 <div>&lt;describe&gt;&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="108" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s217090" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s217091" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s217091" class=N><span lang=EN-US style='font-family:
 "Courier New";mso-ascii-font-family:"Courier New";mso-fareast-font-family:
 "Times New Roman";mso-hansi-font-family:"Courier New";font-size:150%'><b>Rules
 1 and 2 have one matching </b></span><span lang=EN-US style='font-family:"Courier New";
 mso-ascii-font-family:"Courier New";mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:"Courier New";font-size:150%'><b>condition, and so the
 rules get </b></span><span lang=EN-US style='font-family:"Courier New";
 mso-ascii-font-family:"Courier New";mso-fareast-font-family:"Times New Roman";
 mso-hansi-font-family:"Courier New";font-size:150%'><b>modified </b></span><span
 style='font-family:"Courier New";mso-ascii-font-family:"Courier New";
 mso-fareast-font-family:"Times New Roman";mso-hansi-font-family:"Courier New";
 font-size:150%;mso-special-format:lastCR'><b>&#13;</b></span></div>
</p:notes><p:notes id="109" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s245762" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s245763" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s245763" class=N>
 <div>&lt;describe&gt;&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="110" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s246786" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s246787" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s246787" class=N>
 <div>&lt;describe&gt;&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="111" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s218114" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s218115" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s218115" class=N>Here you can see one inefficiency of the
 inference algorithm I’ve used - we already know that the result can’t be a
 helicopter, but still rule zero gets checked.&#13;
 <div>This is another issue for version 2.</div>
 </div>
</p:notes><p:notes id="112" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s247810" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s247811" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s247811" class=N>
 <div>&lt;describe&gt;&#13;</div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="118" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s220162" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s220163" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s220163" class=N>If we you look again at the rules, you
 can see that none of them has ‘bird’ as its consequence. This means that with
 the information we’ve given it there is no way for the system to prove
 conclusively that the thing is a bird. &#13;
 <div>&#13;</div>
 What it can do though is eliminate all the other options. In this case the
 system would run out of questions before it reached a goal, but it still has
 useful information...</div>
</p:notes><p:notes id="113" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s221186" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s221187" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s221187" class=N>...and give us a conclusion like this.</div>
</p:notes><p:notes id="9" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s223234" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s223235" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s223235" class=N>
 <div>So there you have it. &#13;</div>
 <div>&#13;</div>
 Just as a finishing touch I created a icon for the application, which is
 easiest to do if you load the default icon Sun provide into your favourite
 image editor and edit that. This way you automatically get the right size and
 format. &#13;As you can see on the screenshot, I stayed up till nearly 11
 o’clock designing this icon.&#13;
 <div>&#13;</div>
 Some of you might feel cheated, as this presentation was billed as developing an
 application for the Palm, and yet a lot of what I’ve described could have been
 targeted at the desktop or even the server side. In a way, that’s the whole point.
 Although Java doesn’t offer the kind of platform independence that Sun would
 like us to believe it does, it certainly helps closing the gap between developing
 for a small device and developing for a big one.&#13;
 <div>&#13;</div>
 Although not trivial, this application really is at the lower end of what can
 be done with Java on the Palm. There’s about 1,200 lines of code in the application,
 in 15 classes. When compiled and packaged for the Palm, the application only
 takes up about 40 kilobytes - not what you’d call pushing the limits.&#13;
 <div>&#13;</div>
 Obviously the amount of data you can handle on the Palm is limited by the memory,
 and in terms of processing there’s not only the speed to consider but also a
 limited processing stack size. Compared to writing in native C for the Palm,
 in all these respects Java is less efficient, but for a large proportion of projects
 you might consider, the ease of using an Object Oriented language with a
 largely<span style="mso-spacerun: yes">  </span>familiar set of class
 libraries far outway these costs. In addition, apart from the user interface
 issues there is a good chance that an application you develop for the Palm can
 be run on another device such as a mobile phone, or even an intelligent
 fridge-freezer.</div>
</p:notes><p:notes id="82" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s131074" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><p:shaperange
  href="master01.xml#_x0000_m6149"/><v:shape id="_x0000_s131075" type="#_x0000_m6149"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <v:fill o:detectmouseclick="f"/>
  <v:stroke o:forcedash="f"/>
  <o:lock v:ext="edit" text="f"/>
  <p:placeholder type="body" position="1"/></v:shape>
 <div v:shape="_x0000_s131075" class=N>
 <div><span style='font-size:117%'>&#13;</span></div>
 <div><span style='mso-special-format:lastCR'>&#13;</span></div>
 </div>
</p:notes><p:notes id="83" layout="notes" slots="slideImage,body">
 <v:rect id="_x0000_s133122" style='position:absolute;left:90pt;top:54pt;
  width:5in;height:270pt'>
  <v:fill o:detectmouseclick="t"/>
  <v:stroke o:forcedash="t"/>
  <o:lock v:ext="edit" text="t"/>
  <p:placeholder type="slideImage"/></v:rect><v:rect id="_x0000_s133123"
  style='position:absolute;left:1in;top:342pt;width:396pt;height:324pt'>
  <p:placeholder type="body" position="1"/></v:rect>
 <div v:shape="_x0000_s133123" class=N><span style='font-size:117%'>several
 hundred Princeton University students and 99% got it </span><span
 style='font-size:117%'>wrong</span><span style='mso-special-format:lastCR'>&#13;</span></div>
</p:notes>
</body>

</html>
