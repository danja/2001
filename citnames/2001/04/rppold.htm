 
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><!-- #BeginTemplate "/Templates/Citnames.dwt" --><HEAD>
<!-- #BeginEditable "doctitle" --> 
<TITLE>RDF Process Profile</TITLE>
<!-- #EndEditable -->
<meta content="text/html; charset=ISO-8859-1" http-equiv=Content-Type>
<!-- #BeginEditable "metatags" --> 
<link rel="stylesheet" href="../../../css/style.css">
<meta name="Author" content="Danny Ayers">
<meta name="keywords" content="RAD, RDF, algorithm, schema, XML">
<meta name="description" content="Mudman description of the RDF Algorithm Descriptor format.">
<!-- #EndEditable -->
</HEAD>

<BODY BGCOLOR="#FFFFFF">
<p align="center"><a href="http://www.isacat.net" title="Semantic citnameS"><font face="Courier New, Courier, mono">S 
  E M A N T I C I T N A M E S</font></a></p>
<!-- #BeginEditable "Body" --> 
<H1 align="center">RDF Process Profile (RPP) Specification 0.0.1</H1>
<p>&nbsp;</p>
<H2><A name=abstract>Abstract</A></H2>
<P>RDF Process Profile (RPP) is a lightweight extensible description format for 
  processes. RPP is an XML application, conforms to the W3C's RDF Specification 
  and is extensible via XML-namespace and/or RDF based modularization. </P>
<h2>Contents<a name="contents"></a></h2>
<ol>
  <li><a href="#status">Status</a></li>
  <li><a href="#version">Version</a></li>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#terminology">Terminology</a></li>
  <li><a href="#vocabulary">Vocabulary</a><br>
    5.1 <a href="#classes">Classes</a><br>
    5.2 <a href="#properties">Properties</a></li>
  <li><a href="#schema">RDF Schema</a></li>
  <li><a href="#example">Example</a></li>
  <li><a href="#notes">Notes</a> 
  <li><a href="#todo">To Do</a><br>
</ol>
<h2><a name=status>1. Status</a></h2>
<p>Mudman in the monsoon season. </p>
<p>Comments should be mailed to <a href="mailto:danny@panlanka.net">danny@panlanka.net</a></p>
<h2><a name=version>2. Version</a></h2>
<strong>This Version is the latest :</strong> <a href="http://www.citnames.com/2001/04/rad-schema">http://www.citnames.com/2001/04/rpp-schema.htm<br>
<br>
</a> 
<div class=version> 
  <h2><a name=introduction></a>3. Introduction</h2>
  <P> Metadata is usually defined as being data about data. What is proposed here 
    is to apply exactly the same techniques to describe processes, moving away 
    from data-centricity towards a more general resource-centricity. RDF Process 
    Profile is an attempt to standardize the description of data processors, and 
    allow their processes to be represented in the same fashion as any other (web) 
    resource. RPP is intended as a lightweight layer based on RDF(S) which will 
    allow simple description of a process, on top of which more sophisticated 
    layers can be built. The processes may be available online, though RPP is 
    intended to be appropriate for both online and offline resources. To achieve 
    the maximum applicability of process description wherever possible the processes 
    will be identified through reference to their algorithm(s), though in practice 
    it is anticipated that for most processes the algorithms themselves will not 
    be available, rather an implementation of the algorithm. The goal is to provide 
    in a RPP document descriptions of all the resources required to carry out 
    the data processing defined in that document. RPP definitions may be defined 
    in terms of other RPP definitions, allowing multistage/multilayered process 
    definition. Terms defined in other schema may be included to extend the functionality 
    of a RPP document into other domains. The use of a standard metadata format 
    (RDF/XML) should enable advertising and lookup/discovery of the processes 
    described in RPP documents. It is hoped that the RPP format will provide a 
    suitable base layer on top of which other facilities required by online services, 
    for example process leasing, chain of trust and security management can be 
    built.</P>
  <P>Where a language like DAML allows data to be marked up for agent's consumption, 
    RPP will describe the agents themselves so they may be fed the right stuff.</P>
  <P>An alternate view of RPP would be that of enabling a meta query system. We 
    have some data that needs processing or a requirement for data that is specified 
    in metadata. We supply this to a system containing marshalling facilities 
    and an inference engine, with access to RPP repositories. The inferencing 
    required is little more than matching the conventional metadata with an algorithm 
    described in RPP and then the data and algorithm could be marshalled to an 
    appropriate processing host and the operation carried out. There may be data 
    returned from the query but this need not always be the case - e.g. the state 
    of an external system may be modified.</P>
  <h2><a name="terminology"></a>4. Terminology</h2>
  <P><b>4.1 Algorithm</b><br>
    Within this document this word is primarily used in the dictionary sense of 
    a process or set of rules used for calculation or problem-solving, though 
    the range of entities described by the term here extend from very abstract 
    procedures e.g. 'draw a fish' through more canonically expressed forms such 
    as C source code, also encompassing black box data processors. </P>
  <P>The actual detail of the description of an algorithm is in many respects 
    not significant, as long as there is enough information for an inference engine 
    receiving a RPP document and a set of metadata to be able to decide (through 
    reference to external resources as necessary) whether or not the algorithm 
    described can be realized in a form that can carry out the required processing 
    of the data the metadata describes. </P>
  <P><b>4.2 Process*<br>
    </b>The entities being described by a RPP definition will be referred to as 
    data processors or processes, with no direct relation to XML processors. Within 
    this document the terms process and algorithm are used interchangeably, which 
    is sloppy as in this context they may not refer to the same thing.</P>
  <P>Informal prose is suggestive. Formal specification non-lucrative...</P>
</div>
<DIV class=version><a name="vocabulary"> 
  <h2>5. Vocabulary</h2>
  </a> 
  <p>RPP follows the conventions for the RDF/XML syntax and model described in 
    <a href="http://www.w3.org/TR/REC-rdf-syntax">RDFMS</a>. Additional elements 
    are as follows :</p>
  <table width="75%" border="0" align="center" cellpadding="10" cellspacing="10">
    <tr> 
      <td> 
        <div class=version> 
          <p align="left"><b>Classes</b></p>
        </div>
        <ul>
          <li> 
            <div class=version><a href="#cresource">Resource</a></div>
          </li>
          <li> 
            <div class=version><a href="#cprofile">Profile</a></div>
          </li>
          <li><a href="#ccomponent">Component</a></li>
          <li><a href="#cavailability">Availability</a></li>
          <li><a href="#cdependency">Dependency</a></li>
          <li><a href="#cenvironment">Environment</a></li>
          <li><a href="#clibrary">Library</a></li>
          <li> 
            <div class=version><a href="#calgorithm">Algorithm</a></div>
          </li>
          <li><a href="#cinterface">Interface</a></li>
          <li> 
            <div class=version><a href="#cdataformat">DataFormat</a></div>
          </li>
          <li> 
            <div class=version><a href="#cencoding">Encoding</a></div>
          </li>
        </ul>
      </td>
      <td> 
        <div class=version> 
          <p align="left"><b>Properties</b></p>
        </div>
        <div class=version></div>
        <ul>
          <li> 
            <div class=version><a href="#pcomponent">component</a></div>
          </li>
          <li><a href="#plocation">location</a></li>
          <li> 
            <div class=version><a href="#pavailability">availability</a></div>
          </li>
          <li> 
            <div class=version><a href="#pin">in</a></div>
          </li>
          <li> 
            <div class=version><a href="#pout">out</a></div>
          </li>
          <li> 
            <div class=version><a href="#palang">alang</a></div>
          </li>
          <li> 
            <div class=version><a href="#phasdependency">hasDependency</a></div>
          </li>
          <li> 
            <div class=version><a href="#pimplementationof">implementationOf</a></div>
          </li>
          <li> 
            <div class=version><a href="#pequivalentTo">equivalentTo</a></div>
          </li>
        </ul>
        <p>&nbsp;</p>
      </td>
    </tr>
  </table>
  <p align="left">Pretty picture from the wonderful <a href="http://www.dfki.uni-kl.de/frodo/RDFSViz/">RDFSViz</a> 
    : </p>
  <p align="center"><img src="rpp.rdfs_frodo.gif" width="1176" height="500"></p>
  <p>&nbsp;</p>
</DIV>
<DIV class=version> // I'm not at all sure about the scoping - my general feeling 
  was that it would be most useful for the attributes to have there values described 
  by reference to external documents, though additional local (&amp; literal?) 
  support might be more appropriate. 
  <h3>5.1 Classes<a name="classes"></a></h3>
  <h6>5.1.1 rpp:Resource<a name="cresource"></a></h6>
  A wrapper around rdfs:Resource to localise references 
  <h6><b>5.1.2 rpp:Profile<a name="cprofile"></a></b></h6>
  <p>This resource - name and location (not necessarily the same as <a href="#plocation">location 
    </a>property) </p>
  <h6>5.1.3 rpp:Component <a name="ccomponent"></a></h6>
  Container class for classes specifying profile attributes. 
  <h6>5.1.4 rpp:Availability<a name="cavailability"></a></h6>
  How machine-friendly the algorithm resource is - one of <i>definition</i>, <i>source</i>, 
  <i>executable</i> or <i>process</i>. If the resource may be used directly by 
  sending and/or receiving data as described in the RPP definition, then the availability 
  property will have the value <i><b>process</b></i>. If the resource may be used 
  in conjunction with another single (rad:algorithm) resource such as an operating 
  system runtime environment or interpreter then the availability property will 
  have the value <i><b>executable</b></i>. If the resource needs more than one 
  external (rad:algorithm) resource to be able to carry out the required data 
  processing then the availability will be have the value <i><b>source</b></i>. 
  If the algorithm is described in a form that isn't machine readable (though 
  may be human-readable - using any form of notation such as the English language, 
  diagrams etc) the availability will have the value <i><b>definition.</b></i> 
  <h6>5.1.5 rpp:Dependency<a name="cdependency"></a></h6>
  <p>Objects without which the process cannot operate.</p>
  <h6>5.1.6 rpp:Environment<a name="cenvironment"></a></h6>
  Particular kind of dependency - runtime environment needed by the executable 
  algorithm, typically the operating system or virtual machine. 
  <h6>5.1.7 rpp:Library<a name="clibrary"></a></h6>
  Particular kind of dependency - typical example would be Java libraries that 
  had to be on the classpath. 
  <h6><b>5.1.8 rpp:Algorithm<a name="calgorithm"></a></b></h6>
  <p>An identifier for the algorithm of the process - may be name or reference 
    to source code etc. </p>
  <h6>5.1.9 rpp:Interface<a name="cinterface"></a></h6>
  This will describe the means by which data can pass to and/or from the data 
  processor. For an online service this might for example be a HTTP POST. For 
  offline resources this should give adequate description of the data processor's 
  requirements so that an online data processor meeting these requirements (if 
  one exists, and is known to the system) may be identified. 
  <h6><b>5.1.10 rpp:DataFormat<a name="cdataformat"></a></b></h6>
  <p>A description of a data format. Typically this will be the URI of a schema. 
    The schema may be a DTD, XML Schema, human language description or other type. 
  </p>
  <h6><b>5.1.11 rpp:Encoding<a name="cencoding"></a></b></h6>
  <p>The low-level encoding of the data to/from the processor<br>
  </p>
  <h3>5.2 Properties<a name="properties"></a></h3>
  <div class=version></div>
</DIV>
<DIV class=version> 
  <h6>5.2.1 rpp:component<a name="pcomponent"></a></h6>
  <p>&nbsp;</p>
</DIV>
<DIV class=version> 
  <h6>5.2.2 rpp:location<a name="plocation"></a></h6>
  <p>The location of the process described by RPP (e.g. the URL to POST to for 
    online processing or the URL pointing to an executable binary file).</p>
</DIV>
<DIV class=version> 
  <div class=version> 
    <h6>5.2.3 rpp:availability<a name="pavailability"></a></h6>
    <p>&nbsp;</p>
  </div>
</DIV>
<DIV class=version> 
  <div class=version> 
    <h6>5.2.4 rpp:in<a name="pin"></a></h6>
    <p>Defines characteristics of the process in its role as a consumer of data. 
      The domain and range of the data the algorithm consumes will be defined. 
      A RPP definition of an algorithm can contain any number of input values, 
      the only constraint being that there is sufficient description to fulfil 
      the requirements of the <a href="#pavailability">rpp:availability</a> property.</p>
  </div>
</DIV>
<DIV class=version> 
  <div class=version> 
    <h6>5.2.5 rpp:out<a name="pout"></a></h6>
    <p>As rpp:in, but defines characteristics of the algorithm in its role as 
      a producer of data.</p>
  </div>
</DIV>
<DIV class=version> 
  <div class=version> 
    <h6>5.2.6 rpp:alang<a name="palang"></a></h6>
    <p>Applicable when availability is source or definition. The language the 
      algorithm is defined in, if known, one of C, C++, Perl, Python, Java, Pseudocode, 
      UML etc. etc. This may refer to a URI as a unique identifier, or another 
      RPP document defining the interpreter/compiler.</p>
  </div>
</DIV>
<DIV class=version> 
  <div class=version> 
    <h6>5.2.7 rpp:hasDependency<a name="phasdependency"></a></h6>
    <p>Anything required to carry out the process being described. </p>
  </div>
</DIV>
<DIV class=version> 
  <div class=version> 
    <h6>5.2.8 rpp:implementationOf<a name="pimplementationof"></a></h6>
    <p>A pointer to a more abstract equivalent RPP. </p>
    <p>(<i>definition</i> isMoreAbstractThan <i>source</i> isMoreAbstractThan 
      <i>executable</i> isMoreAbstractThan <i>process) <br>
      (isMoreAbstract needs defining? needs inverse?</i>)</p>
  </div>
</DIV>
<DIV class=version> 
  <div class=version> 
    <h6>5.2.9 rpp:equivalentTo<a name="pequivalentto"></a></h6>
    <p>Any other known versions of the algorithm expressed in RPP format. Typically 
      this would be used to refer a request for processing on to a more appropriate 
      processor. </p>
  </div>
</DIV>
<DIV class=version> 
  <h2>6. Schema<a name="schema"></a></h2>
  <p>// Big holes - mind your step</p>
  <p>This version : <a href="http://www.citnames.com/2001/04/rpp.rdfs%20">http://www.citnames.com/2001/04/rpp.rdfs 
    </a></p>
  <p align="left">&nbsp;</p>
  <p align="center">&nbsp;</p>
  <table width="75%" border="0" bgcolor="#CCFFFF" align="center" cellpadding="5" cellspacing="5">
    <tr> 
      <td> 
        <p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>
          &lt;rdf:RDF xmlns:rdf = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
          <br>
          xmlns:rdfs = 'http://www.w3.org/2000/01/rdf-schema#'<br>
          </code><code>xmlns:rpp = 'http://www.citnames.com/2001/04/rpp#'&gt; 
          </code> </p>
        <p> <code>&lt;rdfs:Class rdf:ID='Resource'&gt;<br>
          &lt;rdfs:label&gt;<br>
          RPP Resource<br>
          &lt;/rdfs:label&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='http://www.w3.org/2000/01/rdf-schema#Resource' 
          /&gt;<br>
          &lt;rdfs:comment&gt;<br>
          This is a common base class for all resources whose properties may be 
          asserted in a RDF Process Profile.<br>
          &lt;/rdfs:comment&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p> <code>&lt;rdfs:Class rdf:ID='Profile'&gt;<br>
          &lt;rdfs:label&gt;<br>
          RPP Resource<br>
          &lt;/rdfs:label&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Resource' /&gt;<br>
          &lt;rdfs:comment&gt;<br>
          The Profile itself.<br>
          &lt;/rdfs:comment&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p> <code>&lt;rdfs:Class rdf:ID='Component'&gt;<br>
          &lt;rdfs:label&gt;<br>
          RPP profile component<br>
          &lt;/rdfs:label&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Resource' /&gt;<br>
          &lt;rdfs:comment&gt;<br>
          Base class for groups of profile attribute values.<br>
          &lt;/rdfs:comment&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p> <code>&lt;rdfs:Class rdf:ID=&quot;Dependency&quot; rdfs:comment=&quot;needed 
          to run&quot;&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Component' /&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p> <code>&lt;rdfs:Class rdf:ID=&quot;Environment&quot; rdfs:comment=&quot;needed 
          to run&quot;&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Dependency' /&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p> <code>&lt;rdfs:Class rdf:ID=&quot;Library&quot; rdfs:comment=&quot;needed 
          to run&quot;&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Dependency' /&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p><code><br>
          &lt;rdfs:Class rdf:ID=&quot;Algorithm&quot; rdfs:comment=&quot;Abstract 
          algorithm&quot;&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Component' /&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p></p>
        <p><code><br>
          &lt;rdfs:Class rdf:ID=&quot;Interface&quot; rdfs:comment=&quot;I/O of 
          processor&quot;&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Component' /&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p> <code>&lt;rdfs:Class rdf:ID=&quot;DataFormat&quot; rdfs:comment=&quot;Data 
          format&quot;&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Interface' /&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p> <code>&lt;rdfs:Class rdf:ID=&quot;Encoding&quot; rdfs:comment=&quot;low-level 
          data encoding&quot;&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Interface' /&gt;<br>
          &lt;/rdfs:Class&gt;</code></p>
        <p><code>&lt;rdfs:Class rdf:ID=&quot;Availability&quot; rdfs:comment=&quot;machine-readability&quot;&gt;<br>
          &lt;rdfs:subClassOf rdf:resource='#Component' /&gt;<br>
          &lt;/rdfs:Class&gt;<br>
          &lt;Availability rdf:ID=&quot;Process&quot; /&gt;<br>
          &lt;Availability rdf:ID=&quot;Executable&quot; /&gt;<br>
          &lt;Availability rdf:ID=&quot;Source&quot; /&gt;<br>
          &lt;Availability rdf:ID=&quot;Definition&quot; /&gt;</code></p>
        <p></p>
        <p><code><br>
          &lt;rdfs:Property rdf:ID='component'&gt;<br>
          &lt;rdfs:label&gt;<br>
          RPP component property<br>
          &lt;/rdfs:label&gt;<br>
          &lt;rdfs:domain rdf:resource='#Profile' /&gt;<br>
          &lt;rdfs:range rdf:resource='#Component' /&gt;<br>
          &lt;rdfs:comment&gt;<br>
          Indicates a component profile.<br>
          &lt;/rdfs:comment&gt;<br>
          &lt;/rdfs:Property&gt;</code></p>
        <p> <code>&lt;rdf:Property rdf:ID=&quot;location&quot; rdfs:comment=&quot;location 
          of the algorithm resource&quot;&gt;<br>
          &lt;rdfs:range rdf:resource=&quot;#Resource&quot;/&gt;<br>
          &lt;rdfs:domain rdf:resource=&quot;#Profile&quot; /&gt;<br>
          &lt;/rdf:Property&gt;</code></p>
        <p> <code>&lt;rdf:Property rdf:ID=&quot;availability&quot; rdfs:comment=&quot;how 
          machine readable is the algorithm&quot;&gt;<br>
          &lt;rdfs:range rdf:resource=&quot;#Availability&quot;/&gt;<br>
          &lt;rdfs:domain rdf:resource=&quot;#Profile&quot; /&gt;<br>
          &lt;/rdf:Property&gt;</code></p>
        <p> <code>&lt;rdf:Property rdf:ID=&quot;in&quot; rdfs:comment=&quot;details 
          of data input&quot;&gt;<br>
          &lt;rdfs:range rdf:resource=&quot;#Interface&quot;/&gt;<br>
          &lt;rdfs:domain rdf:resource=&quot;#Profile&quot; /&gt;<br>
          &lt;/rdf:Property&gt;</code></p>
        <p> <code>&lt;rdf:Property rdf:ID=&quot;out&quot; rdfs:comment=&quot;details 
          of data output&quot;&gt;<br>
          &lt;rdfs:range rdf:resource=&quot;#Interface&quot;/&gt;<br>
          &lt;rdfs:domain rdf:resource=&quot;#Profile&quot; /&gt;<br>
          &lt;/rdf:Property&gt;<br>
          <br>
          &lt;rdf:Property rdf:ID=&quot;alang&quot; rdfs:comment=&quot;(programming) 
          language&quot;&gt;<br>
          &lt;rdfs:range rdf:resource=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#Literal&quot;/&gt;<br>
          &lt;rdfs:domain rdf:resource=&quot;#Algorithm&quot; /&gt;<br>
          &lt;/rdf:Property&gt;<br>
          <br>
          &lt;rdf:Property rdf:ID=&quot;hasDependency&quot; rdfs:comment=&quot;anything 
          that's needed&quot;&gt;<br>
          &lt;rdfs:range rdf:resource=&quot;#Dependency&quot;/&gt;<br>
          &lt;rdfs:domain rdf:resource=&quot;#Profile&quot; /&gt;<br>
          &lt;/rdf:Property&gt;</code></p>
        <p> <code>&lt;rdf:Property rdf:ID=&quot;implementationOf&quot; rdfs:comment=&quot;another 
          algorithm that does the same&quot;&gt;<br>
          &lt;rdfs:range rdf:resource=&quot;#Resource&quot;/&gt;<br>
          &lt;rdfs:domain rdf:resource=&quot;#Profile&quot; /&gt;<br>
          &lt;/rdf:Property&gt;</code></p>
        <p> <code>&lt;rdf:Property rdf:ID=&quot;equivalentTo&quot; rdfs:comment=&quot;another 
          algorithm that does the same&quot;&gt;<br>
          &lt;rdfs:range rdf:resource=&quot;#Resource&quot;/&gt;<br>
          &lt;rdfs:domain rdf:resource=&quot;#Profile&quot; /&gt;<br>
          &lt;/rdf:Property&gt;</code></p>
        <p><code>&lt;/rdf:RDF&gt;</code><br>
        </p>
      </td>
    </tr>
  </table>
  <h2>7. Example<a name="example"></a></h2>
  <div class=version> 
    <div class=version> 
      <p>// I know this is lousy - in terms of syntax &amp; content (and I'm not 
        even sure about the font), but I thought if I put this in at least it's 
        a start - any flames I get should help the learning process ;-)</p>
      <table width="75%" border="0" bgcolor="#CCFFFF" align="center" cellpadding="5" cellspacing="5">
        <tr> 
          <td> 
            <p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></p>
            <p><code>&lt;rdf:RDF xmlns:rdf = &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; 
              <br>
              xmlns:rdfs = &quot;http://www.w3.org/2000/01/rdf-schema#&quot; <br>
              xmlns:dc=&quot;http://purl.org/dc/elements/1.0/&quot; <br>
              xmlns = &quot;http://www.citnames.com/2001/04/rpp#&quot;&gt;</code></p>
            <p><code>&lt;Profile rdf:about=&quot;http://www.w3.org/2000/10/swap/cwm.py&quot;&gt;</code></p>
            <p> <code>&lt;dc:Title&gt;Closed World Machine&lt;/dc:Title&gt;<br>
              &lt;dc:Description&gt;<br>
              This is an engine which knows a certian amount of stuff and can 
              manipulate it.<br>
              It is a query engine, not an inference engine: that is, it will 
              apply rules<br>
              but won't figure out which ones to apply to prove something.<br>
              &lt;/dc:Description&gt;<br>
              &lt;dc:Creator&gt;TimBL&lt;/dc:Creator&gt;</code></p>
            <p> <code>&lt;availability rdf:resource=&quot;#source&quot;/&gt;<br>
              &lt;in rdf:resource=&quot;http://www.w3.org/2000/10/swap/log.n3#&quot;/&gt;<br>
              &lt;in rdf:resource=&quot;http://www.w3.org/DesignIssues/Notation3.html&quot;/&gt;<br>
              &lt;in rdf:resource=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;/&gt;<br>
              &lt;implementationOf rdf:resource=&quot;????&quot;/&gt;<br>
              &lt;location rdf:resource=&quot;http://www.w3.org/2000/10/swap/cwm.py&quot;/&gt;<br>
              &lt;hasDependency rdf:resource=&quot;UNIX&quot;/&gt;<br>
              &lt;hasDependency rdf:resource=&quot;http://www.w3.org/2000/10/swap/notation3.py&quot;/&gt;<br>
              &lt;out rdf:resource=&quot;http://www.w3.org/DesignIssues/Notation3.html&quot;/&gt;<br>
              &lt;out rdf:resource=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;/&gt;<br>
              &lt;/Profile&gt;</code></p>
            <p><code>&lt;/rdf:RDF&gt;</code></p>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <h2>8. Notes<a name="notes"></a></h2>
  <p>The general idea here seems reasonable to me - not distinguishing between 
    the metadata of program and data just seems like updating von Neumann a bit.</p>
  <p>The aim mustn't be confused with any kind of formal notations - this isn't 
    about making rock-solid formalisms, just providing enough info to be able 
    to use a process. </p>
  <p>Detractors may (hopefully) say that RPP is a gross oversimplification - the 
    goal is to simplify down to the barest minimum needed to do the job.</p>
  <p>The first few RPP documents will be the hardest - once a document has been 
    built to describe e.g. Python, identifying this will be adequate for RPPs 
    of processes that use Python (rdfs:isDefinedBy).</p>
  <p>It'd be nice to have some clear indication of when the end result of a process 
    is a graphical representation, but I couldn't think of a way without it seeming 
    overly arbitrary.</p>
  <p>The way CC/PP wraps up attributes in a 'Component' object appealed to this 
    code junky - seems like a good sub-pattern of 'Profile'.</p>
  <p>Given that the primary context for RPP is the web it has not been mentioned 
    here that it would be desirable for it to be possible to create a RPP document 
    for any given process - e.g. how an egg is boiled. This may be possible with 
    RPP as defined in this document, however this hasn't been put to the test. 
    Hopefully the next version of this specification will take this more into 
    account.</p>
  <h2>9. To Do<a name="todo"></a></h2>
  Need to a pointer to documentation - rpp:rtfm ? 
  <p> DTD for instances </p>
  <p>run it by rdf-interest &amp; xml-dev</p>
  <p>change my name, buy a <a href="http://www.lankamasks.org">mask</a> &amp; 
    leave the country (again!)</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
</DIV>
<!-- #EndEditable --> 
<p align="right">&copy; 2001 <a href="http://www.isacat.net/misc/biog.htm">Danny Ayers</a> All rights 
  reserved.</p>
  
<div align="center">
  <p><a href="http://www.citnames.com/site.rdf" title="RDF Metadata"><img src="http://www.citnames.com/icons/rdf.png" alt="RDF" width="36" height="14" border="0"/><br>
    </a></p>
  <p><a href="http://www.isacat.net">stuff</a></p>
</div>
</BODY>
<!-- #EndTemplate --></HTML>

